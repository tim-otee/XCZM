# ------------------------------------------------------------------------------------------
# Impression du contenu du fichier de commandes à exécuter :
# ------------------------------------------------------------------------------------------
#----------------------------------------------------------------------#
'''              Multiple OTF crack propagation in 3D-XCZM   
                     through Super-Critical loading
                 -----------------------------------------        
                              (OCT 2016)                

Contents:
		[1/4] Notes on use
		[2/4] Crack syntax
		[3/4] Model testing list
		[4/4] Model set-up: 3 Phases
		
#----------------------------------------------------------------------#	
[1/4] Notes on use
#----------------------------------------------------------------------#

The model must have a first crack to propagate. If only N_FISS populated 
it will fail with the contact due to nodes (either incease time or force).

When changeing geometries/meshes several parts of the model need to be 
changed:
		1 - Naming of DEFI_GROUP in PHASE 1 and 2
		2 - Contact for for CTX needs each crack explicitly defined
		3 - h_min - Needs to be minimum element size of mesh
		4 - int_nb_cracks - needs to be number of cracks defined
		5 - L_Int_Crack - list of intial cracks

When cracks get close to interaction da_max needs to be reduced to avoid 
cracks contacting

#----------------------------------------------------------------------#
[2/4] Crack syntax:
#----------------------------------------------------------------------#

	1 Naming:	
	
	  - Intial cracks
	 	FISS[ C_0_QSTATIC(0)_nbcalc ][ C_0_DYNAMIC(1)_nbcalc ] * number of cracks
	  - Propagating cracks 
		FISP[ P_0_QSTATIC(0)_nbcalc ][ P_0_DYNAMIC(1)_nbcalc ] * number of cracks		
	  - New cracks 	
	 	FISS[ C_0_QSTATIC(0)_nbcalc+1 ][ C_0_DYNAMIC(1)_nbcalc+1 ] * number of cracks	
				
	2 Propagation criteria
	
	  TEST 1 - Does it arrest?
	  TEST 2 - Does it Propagate beyond cohezive zone (CZ)?
	  TEST 3 - Propagate the crack, ok?
		
	3 Sorting hats (bins):
	
	  P_FISS  = Passed TEST 1 and 2  - crack to be propagated
	  N_FISS  = Failed TEST 1        - crack not intiated 
	  A_FISS  = Failed TEST 2        - crack arrested  
	  PN_FISS = Failed TEST 2        - not propagated beyond CZ
		                                
#----------------------------------------------------------------------#
[3/4] Model testing list:
#----------------------------------------------------------------------#

	1 Correct inititations - above critical loading 
	  - Should Populate N_FISS
	2 Correct propagations- below critical loading 
	  - Should Populate P_FISS
	3 Correct crack extension to propagate - large n*h_min 
	  - Should Populate PN_FISS
	4 Arrested during propagation - Not implimented atm Defaults N_FISS
	  - Should Populate A_FISS

#----------------------------------------------------------------------#	
[4/4] Model set-up: 3 Phases
#----------------------------------------------------------------------#

Phase 1 Find a loading for model which is just above critcal stress
		[1] Uses a while loop and iterative if statement to reach limit
		[2] Linearly extrapolate from intial loading and adds 1% to
		    breach Critical Stress

Phase 2 propgates multiple cracks through a sampling algorithum
          which detects intitating and stop-starting cracks. 
                                            
		Structure: -

		[1] Preamble
			- Material properties, Time-stepping, List of test instances
			- Read and name mesh componants
				- Crack fronts need to be named (FONDINI_n)
			- Define model vectors et material (aster object)
		[2] Define intial list of cracks - (crack preamble)
			- define each crack (DEFI_FISS_XFEM)
			- detect intial crack fronts (PROPA_FISS)
		[3] Propagation for loop over INST list
			- Quasi-static <---------------------------|
				- Contact - all defined cracks         |
			- Dynamic                                  |
			- TEST CRITERION                           |
				- Calc_G intial crack                  |
					- (has it arrested?)			   | 
				- Detect crack fronts 	               | 
				- IF lc < da. 5*h_min                  |
					- IF Prop- + P_FISS -> PROPAGATE   |
					- IF NOT- + N_FISS                 |
			- tuple(P_FISS + N_FISS)                   |
			- (loop)-----------------------------------|
		
		*** Crack Naming Syntax ***
		.... 
		[4] Post-processing 
			- Ouput final mesh step 
			- Output resu depl, stress etc


Phase 3 Post processing 	



''' 
#----------------------------------------------------------------------#
DEBUT(PAR_LOT ='NON',
      #IMPR_MACRO='OUI',
      CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      IGNORE_ALARM=('SUPERVIS_22','SUPERVIS_1','XFEM_94','MECANONLINE_2'),); 

# - Graphite
# Mesh in mm 
young = 10.E3
poiss = 0.2
Gc = 0.140 #0.003
Sc = 25
rho = 1.8e-9 
pena_lag = 2.*Sc*Sc/Gc

#Applied Loadings
pressures=pressured=1.25 #0.1 #8.
percential= 100          # 100 equates to 1% critical load

# Quasi-static time steps DO NOT CHANGE!!!
tdyn = 1.E-5
nbpas = 1

# Dynamic Calculation parameters
#nbcalc =3 #19                     # Must align to number of instfin
nbpady =2000                      # Number of steps explicit 
deltat = 2.e-8                  # CDM explicit step size
nbpas_ar = 200                    # Archiving & PROPA_FISS call step
tfin = tdyn+nbpady*deltat       # Final time
deltar = (tfin-tdyn)/nbpas_ar   # Implicit function time-steps
instfin = [1.1e-5,1.4e-5,1.7e-5,2.0e-5,2.3e-5,2.4e-5,2.5e-5,2.8e-5,3.1e-5,3.4e-5,3.7e-5,4.0e-5,4.3e-5,4.6e-5,4.9e-5,tfin]
nbcalc = len(instfin)

# Maximum Macro-crack extension for PROPA_FISS step
da_max=20.

# Initial Crack Angle
angle=0.      # The intial crack angle must match in dynamics!
nb_pts=2.     # Number of elements along crack front
h_min=1.0
int_nb_cracks = 2 # Intial number of cracks
Prop_len=5#0.88*((Gc*young)/((Sc*Sc)*(1-(poiss*poiss)))) # Estimation of static cohesive zone size

'''
print "\n #===========================================================# \n"
print "   PHASE 1 - LOADING for S just above Sc"
print "\n #===========================================================# \n"


S=0           # Intialising stress test as below Sc 
sl=[]         # List of stresses throught loading increment
while (S <Sc):		
	MAIL=LIRE_MAILLAGE(FORMAT='MED',);

	MAIL = DEFI_GROUP(reuse =MAIL,
		   MAILLAGE = MAIL,
		   CREA_GROUP_MA = (
			  _F(NOM = 'FACE_SUP', GROUP_MA = 'GM123'),
			  _F(NOM = 'FACE_INF', GROUP_MA = 'GM124'),
			  _F(NOM = 'FONDINI_0', GROUP_MA = 'GM125'),
			  _F(NOM = 'FONDINI_1', GROUP_MA = 'GM125_1'),          
			  _F(NOM = 'LIG_HAUT', GROUP_MA = 'GM126'),
			  _F(NOM = 'LIG_LAT' , GROUP_MA = 'GM127'),
			  _F(NOM = 'VOLUME' , GROUP_MA = 'GM128'),
		   ),
		   CREA_GROUP_NO = (
			  _F(GROUP_MA = 'LIG_HAUT'),
			  _F(GROUP_MA = 'LIG_LAT'),
			  _F(NOM = 'c1' , GROUP_MA = 'FONDINI_0'),
			  _F(NOM = 'c2' , GROUP_MA = 'FONDINI_1'),          
			 )
		   );

	MA=DEFI_MATERIAU(ELAS = _F(E = young,
									NU = poiss,
									RHO = rho),
										 );     

	MAIL=MODI_MAILLAGE(reuse=MAIL,
					   MAILLAGE=MAIL,
					   ORIE_PEAU_3D=_F(GROUP_MA=('FACE_SUP','FACE_INF'),),
					   );

	MODE=AFFE_MODELE(MAILLAGE=MAIL,
					 AFFE=_F(TOUT='OUI',
							 PHENOMENE='MECANIQUE',
							 MODELISATION='3D',),);

	MATE=AFFE_MATERIAU(MAILLAGE=MAIL,
					   AFFE=_F(TOUT='OUI',
							   MATER=MA,),);



	CHAR=AFFE_CHAR_MECA(MODELE=MODE,
					  PRES_REP=(_F(GROUP_MA='FACE_INF',
												 PRES=-pressures,),
											  _F(GROUP_MA='FACE_SUP',
												 PRES=-pressures,),),
					  DDL_IMPO = (_F(GROUP_NO='LIG_HAUT', DY = 0.0, DZ = 0.0),
											_F(GROUP_NO='LIG_LAT', DX = 0.0, DY = 0.0),),
						);
						
	L_INST=DEFI_LIST_REEL(DEBUT=0.0,
						  INTERVALLE=_F(JUSQU_A=1,NOMBRE=1,),);
						  
	DEFLIST =DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST = L_INST,),)

		 
	RESU=STAT_NON_LINE(MODELE=MODE,
					   CHAM_MATER=MATE,
					   EXCIT=(_F(CHARGE=CHAR,),),
					   COMPORTEMENT = (_F(RELATION = 'ELAS',),),
					   INCREMENT=_F(LIST_INST=DEFLIST,
					   ),);             
					   

	RESU=CALC_CHAMP(reuse=RESU,
				   RESULTAT=RESU,
				   CONTRAINTE=('SIGM_ELNO','SIGM_NOEU','SIGM_ELGA',),
				   CRITERES=('SIEQ_ELNO','SIEQ_NOEU',),);
				   
	#IMPR_RESU(FORMAT='MED',
 	 #        RESU=_F(RESULTAT=RESU),);
 	         
	#IMPR_RESU(FORMAT='RESULTAT',
	#		  #UNITE=10,
	#		  RESU=_F(RESULTAT=RESU,
	#				  NOM_CHAM='SIGM_NOEU',
	#				 # NOM_CMP=('SIXX','SIYY',),
	#				  GROUP_NO=('c1'),
	#				  IMPR_COOR='OUI',
	#				  INST=1.0,
	#				  ),);    
					  
	TAB_U=[None]*int_nb_cracks 
	for r in range(int_nb_cracks):
		R=r+1

		TAB_U[r] = POST_RELEVE_T(ACTION = _F(INTITULE   = 'STRESS',
									  RESULTAT   =  RESU,
									  OPERATION  = 'MOYENNE_ARITH', # average
									  NOM_CHAM   = 'SIGM_NOEU',
									  TOUT_CMP= 'OUI',
									 # NOM_CMP    = 'SIYY',
									  GROUP_NO   = 'c%d'%R,
									  INST=1.0,
									 ),);
		IMPR_TABLE(TABLE=TAB_U[r]);									 
		tmp=TAB_U[r].EXTR_TABLE().values()
		STRESS=tmp['MOYENNE'] #Print the average of the stress at the crack front
		print STRESS
		S=max(STRESS)	
		sl.append(S) # List of max stresses reached at each step
		#DETRUIRE(CONCEPT=_F(NOM=TAB_U),INFO=1);	
		#DETRUIRE(CONCEPT=_F(NOM=STRESS),INFO=1);
			
	# Need to seperate each crack ... List of max(s)	
	if(S <Sc) or (S > Sc):
		DIFF = Sc/S
		print DIFF
		pressures=pressures*DIFF+(Sc/percential) # Linearly extrapolates and adds percentage
		pressured=pressures                      # For static loading
	
	DETRUIRE(CONCEPT=_F(NOM=MA),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=MAIL),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=MODE),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=MATE),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=CHAR),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=L_INST),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=DEFLIST),INFO=1);
	DETRUIRE(CONCEPT=_F(NOM=RESU),INFO=1);
	for r in range(int_nb_cracks):	
		DETRUIRE(CONCEPT=_F(NOM=TAB_U[r]),INFO=1);
print"\n =========================================================== \n"
print "   PHASE 2 CRITICAL LOADING SUMMARY \n"
print 'All tested Stresses = '+str(sl)
print ' '
print 'Critical Loading = '+str(pressured-(Sc/percential))				
print 'Super Critical Loading = '+str(pressured)
print ' '
for r in range(int_nb_cracks):
	print 'Max stress reached crack_'+str(int_nb_cracks-r)+' = '+str(sl[-r-1])
print"\n =========================================================== \n"		
'''


print "\n #===========================================================# \n"
print "   PHASE 2 - Multiple crack Propagation"
print "\n #===========================================================# \n"

# Reading mesh 
MA1 = LIRE_MAILLAGE(FORMAT='MED');
MA =  COPIER(CONCEPT= MA1);

# Defineing groups from mesh. (Easier for transferable codes)
MA = DEFI_GROUP(reuse = MA,
       MAILLAGE = MA,
       CREA_GROUP_MA = (
          _F(NOM = 'FACE_SUP', GROUP_MA = 'GM123'),
          _F(NOM = 'FACE_INF', GROUP_MA = 'GM124'),
          _F(NOM = 'FONDINI_0', GROUP_MA = 'GM125'),
          _F(NOM = 'FONDINI_1', GROUP_MA = 'GM125_1'), 
          _F(NOM = 'LIG_LAT' , GROUP_MA = 'GM1271'),
          _F(NOM = 'VOLUME' , GROUP_MA = 'GM128'),
          _F(NOM = 'ENRICH' , GROUP_MA = 'XFEM_ENRI'), 
          _F(NOM = 'ENR_ALL' , GROUP_MA = 'ENRI_ALL'),                   
       ),
       CREA_GROUP_NO = (
        #  _F(GROUP_MA = 'LIG_HAUT'),
          _F(GROUP_MA = 'LIG_LAT'),
          _F(NOM = 'LIG_HAUT', GROUP_NO = 'GM1261'),
          _F(NOM = 'ABC' , GROUP_MA = 'LIG_LAT'),
         )
       );



# Applying mesh to model (defining vectors)
MO = AFFE_MODELE(MAILLAGE = MA,
			     AFFE =_F(GROUP_MA = ('VOLUME','FACE_SUP','FACE_INF'),
				          PHENOMENE    = 'MECANIQUE',
				          MODELISATION = '3D'),);
         
# Defining Material
BETON = DEFI_MATERIAU(ELAS = _F(E = young,
                                NU = poiss,
                                RHO = rho),
                      RUPT_FRAG = _F(GC = Gc,
                                     SIGM_C = Sc,
                                     PENA_LAGR=pena_lag, ),);     
                                     

L_FOND=[]
SIFIN = [None]*int_nb_cracks
# Number of Crack fronts str list

for i in range(int_nb_cracks):
	# List of crack front str
	L_FOND.append(str('FONDINI_'+str(i)))
                       
	SIFIN[i]=CREA_TABLE(LISTE=(_F(LISTE_R=(0.,1.),PARA='ABSC_CURV'),
    	                    _F(LISTE_R=(1.,1.),PARA='K1'),
        	                _F(LISTE_R=(0.,0.),PARA='K2'),
                      	    _F(LISTE_R=(0.,0.),PARA='K3'),
                      	    _F(LISTE_R=(1.,1.),PARA='G'),
                      	    _F(LISTE_R=(angle,angle),PARA='BETA'),
                        	_F(LISTE_R=(1.,1.),PARA='G_IRWIN'),
                    	    _F(LISTE_I=(1,1),PARA='NUME_FOND'),
                	        _F(LISTE_I=(1,1),PARA='NUME_ORDRE'),
            	            _F(LISTE_I=(1,2),PARA='NUM_PT'),));
#-----------------------------------------------------------------------                                   
# Defineing XFEM cracks 
#-----------------------------------------------------------------------

# CRACK 1
FISIN=DEFI_FISS_XFEM(MODELE=MO,
                     TYPE_DISCONTINUITE='COHESIF',
                     DEFI_FISS=_F(FORM_FISS = 'DEMI_PLAN',
                                  PFON      =(0. , 0., 0.9),
                                  NORMALE   =(0. , 0., 1.),
                                  DTAN      =(0. , 365., 0.),
                                  FRONT_INI  = str(L_FOND[0]),),
                     GROUP_MA_ENRI=('ENRI_ALL'),
                     );

# CRACK 2
FISIN2=DEFI_FISS_XFEM(MODELE=MO,
                     TYPE_DISCONTINUITE='COHESIF',
                     DEFI_FISS=_F(FORM_FISS = 'DEMI_PLAN',
                                  PFON      =(0. ,-363., 0.9),
                                  NORMALE   =(0. , 0., 1.),
                                  DTAN      =(0. , -365., 0.),
                                  FRONT_INI  = L_FOND[1],),
                     GROUP_MA_ENRI=('ENRI_ALL'),
                     );                     

# List intial XFEM cracks 
L_Int_Crack=[FISIN,FISIN2]

#----------------------------------------------------------------------- 
# Intial crack detection
#-----------------------------------------------------------------------
# intialising list of lists needs for loop of list objects
FISS = [[None]*(nbcalc+1) for ii in range(int_nb_cracks)]     # FISS list for each crack
FISP = [[None]*(nbcalc+1) for ii in range(int_nb_cracks)]     # FISS propagation list for each crack
SIF = [[None]*(nbcalc+1) for ii in range(int_nb_cracks)]      # SIF calculation min(value)
SIF_AT=[[None]*(nbcalc+1) for ii in range(int_nb_cracks)]     # SIF TABLE List for each crack
dD_A=[0]*int_nb_cracks                                        # Propagation length for PN_FISS
Prop_sum=[]                                                   # Propagation Summary blurb
print "FISS - "
print FISS
# FISQ (quasi-static) is now FISS[0]
# LIST construction(quasi-static and dynamic) - FISS[quasi,dyn]*nbcalc
# FISQ is necessary cause data structure is enriched if CONTACT='OUI'
# and that would cause the dynamic code to crash if we were to reuse the same object
for j in range(int_nb_cracks):
	# Quasi-static 
	F = "C_"+str(0)+"_"+str(j)+"_"+str(0) 
	PROPA_FISS(MODELE=MO,
			   METHODE_PROPA='COHESIVE',
			   CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
			   ZONE_MAJ='TOUT',
			   TEST_MAIL='NON',
			   FISSURE=_F(FISS_ACTUELLE=FISIN,
						  FISS_PROPAGEE=CO(F),
						  NB_POINT_FOND=nb_pts,
						  TABLE=SIFIN[0],),
			   DA_MAX=da_max,
			   INFO=1,);
	FISS[0][j] = eval(F)
	print 'j is %d'%j
			   
	# split for data structure, to avoid a fake enriched model		 
	# Dynamic
	FF = "C_"+str(1)+"_"+str(j)+"_"+str(0) 	 
	PROPA_FISS(MODELE=MO,
			   METHODE_PROPA='COHESIVE',
			   CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
			   ZONE_MAJ='TOUT',
			   TEST_MAIL='NON',
			   FISSURE=_F(FISS_ACTUELLE=FISIN2,
						  FISS_PROPAGEE=CO(FF),
						  NB_POINT_FOND=nb_pts,
						  TABLE=SIFIN[1],),
			   DA_MAX=da_max,
			   INFO=1,);
	FISS[1][j] = eval(FF)

#----------------------------------------------------------------------- 
# TIME SCHEME - QUASI- STATIC
#----------------------------------------------------------------------- 	
      
# Loading ramp funtcion - QUASI-STATIC
TRACT_T=DEFI_FONCTION(NOM_PARA='INST',
    	              VALE= (0.  , 0.,
                             tdyn, 1.),
                      PROL_DROITE='LINEAIRE',
                      PROL_GAUCHE='LINEAIRE'
                      );

# INST list - INTIAL QUASI-STATIC
INSTANTS = DEFI_LIST_REEL(DEBUT = 0.,
                          INTERVALLE = (_F(JUSQU_A = tdyn, #tdyn = time where dynamic starts
                                           NOMBRE = nbpas),), #nbpas = 1
                          );

# ARCHIVING LIST  - INITIAL QUASI-STATIC
# basically the same as the above
INS_ARCH = DEFI_LIST_REEL(DEBUT = 0.,
                          INTERVALLE = (_F(JUSQU_A =  tdyn, 
                                           NOMBRE = nbpas),),
                          );
#----------------------------------------------------------------------- 
# TIME SCHEME - DYNAMIC
#----------------------------------------------------------------------- 
# Ramp function for dynamic and static propagation until tfin
TRACT_X=DEFI_FONCTION(NOM_PARA='INST',
    	                VALE= (0.  , 0.,
                             tdyn, 1.,
                             tfin, 1.),
                      PROL_DROITE='LINEAIRE',
                      PROL_GAUCHE='LINEAIRE'
                      );

# INST LIST QUASI-STATIC & DYNAMIC
INSTANTX = DEFI_LIST_REEL(DEBUT = 0.,
                          INTERVALLE = (_F(JUSQU_A = tdyn, 
                                           NOMBRE = nbpas),
                                        _F(JUSQU_A = tfin,
                                           NOMBRE = nbpady,),),);
                          
# ARCHIVING LIST - QUASI-STATIC & DYNAMIC
INS_ARCX = DEFI_LIST_REEL(DEBUT = 0.,
                          INTERVALLE = (_F(JUSQU_A =  tdyn, 
                                           NOMBRE = nbpas),
                                        _F(JUSQU_A = tfin,
                                           NOMBRE = nbpas_ar,),),);

# archiving times list, except for last time step                          
INS_AR = DEFI_LIST_REEL(DEBUT = tdyn+deltar,
                        INTERVALLE = (_F(JUSQU_A = tfin,
                                         NOMBRE = nbpas_ar-1,),),);             

#----------------------------------------------------------------------- 
# INTITAL PROPAGATION - QUASI- STATIC
#----------------------------------------------------------------------- 
             
# lists for loops
EVOL = [None]*nbcalc
RIGID = [None]*nbcalc
TRACI = [None]*nbcalc
CHAMM = [None]*nbcalc
MODX = [None]*nbcalc

# For loop over time steps
for i in range(nbcalc):
#    i=0
    #-----------------------------------------------------------------------#-----------------------------------------------------------------------
    print "#-----------------------------------------------------------"
    print "   Propagation_" + str(i)
    print "#-----------------------------------------------------------"
    # Intial crack argument

    print "FISS - "+str(FISS)
    crack_arg = tuple([sublist[0] for sublist in FISS])
    print "Crack Argument - " +str(crack_arg)
    MODK=MODI_MODELE_XFEM(MODELE_IN=MO,
                          FISSURE=crack_arg,
                          CONTACT='OUI',);
     
    CTX = DEFI_CONTACT(MODELE= MODK, # Defining contact for new model
                       FORMULATION    = 'XFEM',
                       FROTTEMENT     = 'SANS',
                       ITER_CONT_MAXI = 3,
                       ZONE=(_F(INTEGRATION='GAUSS',
                                ORDRE_INT=4,
                                ALGO_CONT='CZM',
                                FISS_MAIT = FISS[0][0],
                                ALGO_LAGR='VERSION2',
                                RELATION='CZM_LIN_REG',
                                ),
                            _F(INTEGRATION='GAUSS', # Doubled
                                ORDRE_INT=4,
                                ALGO_CONT='CZM',
                                FISS_MAIT = FISS[1][0],
                                ALGO_LAGR='VERSION2',
                                RELATION='CZM_LIN_REG',)));

    CHAMPMA=AFFE_MATERIAU(MAILLAGE=MA, # Applying material to model
                          MODELE=MODK,
                          AFFE=(_F(GROUP_MA='VOLUME',MATER=BETON),),);



    RIGIDE = AFFE_CHAR_MECA(MODELE   = MODK,
                            DDL_IMPO = (_F(GROUP_NO='LIG_HAUT', DX = 0.0, DY = 0.0, DZ = 0.0),
                                        _F(GROUP_MA='LIG_LAT', DX = 0.0, DY = 0.0, DZ = 0.0),
                                       ),
                           );
                               
    TRACTION = AFFE_CHAR_MECA(MODELE = MODK,
                              FORCE_FACE = (_F(GROUP_MA = 'FACE_SUP', FY = -pressures, FZ = pressures),
                                            _F(GROUP_MA = 'FACE_INF', FY = pressures, FZ = -pressures),
                                            ), 
                            );											 
                                             
                                             

    EVOL[i] = STAT_NON_LINE(MODELE = MODK,# STAT_NON_LINE intial
                            CHAM_MATER = CHAMPMA,
                            CONTACT = CTX,
                            EXCIT = (_F(CHARGE = RIGIDE),
                                     _F(CHARGE = TRACTION,
                                        FONC_MULT = TRACT_T),
                                     ),
                            COMPORTEMENT = (_F(RELATION = 'ELAS', 
                                               GROUP_MA = 'VOLUME'),
                                           ),
                            INCREMENT = _F(LIST_INST = INSTANTS,
                                           INST_FIN = tdyn,
                                           PRECISION=1.E-9,),
                            NEWTON  = _F(REAC_ITER = 1),
                            CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-6,
                                             ITER_GLOB_MAXI = 10),
                            SOLVEUR    = _F(METHODE = 'MUMPS',
                                            NPREC=-1,),
                            ARCHIVAGE = _F(LIST_INST = INS_ARCH,
                                           PRECISION=1.E-15,
                                           CHAM_EXCLU='VARI_ELGA'));
                                           
    # Create field from previous propgation to project
    CH1= CREA_CHAMP (OPERATION= 'EXTR',
                     TYPE_CHAM='NOEU_DEPL_R',
                     RESULTAT= EVOL[i], 
                     NOM_CHAM= 'DEPL',
                     PRECISION = 1.E-9,
                     INST = tdyn);

    CH2= CREA_CHAMP (OPERATION= 'EXTR' ,
                     TYPE_CHAM='ELGA_SIEF_R',
                     RESULTAT= EVOL[i],
                     NOM_CHAM= 'SIEF_ELGA',
                     PRECISION = 1.E-9,
                     INST = tdyn);
                 
    #----------------------------------------------------------------------- 
    # PROPAGATION - DYNAMIC
    #----------------------------------------------------------------------- 
                 
    # index (i+1) cause index 0 is quasi static (former FISQ)
    crack_arg = tuple([sublist[i+1] for sublist in FISS])
    print "Crack Argument - "+str(crack_arg)

    MODX[i]=MODI_MODELE_XFEM(MODELE_IN=MO,
                             FISSURE=crack_arg,
                             CONTACT='NON',);

    CHAMM[i]=AFFE_MATERIAU(MAILLAGE=MA,# New model - Asign material
                             MODELE=MODX[i],
                             AFFE=(_F(GROUP_MA='VOLUME',MATER=BETON),),);

    RIGID[i] = AFFE_CHAR_MECA(MODELE   = MODX[i],
                               DDL_IMPO = (_F(GROUP_NO='LIG_HAUT', DX = 0.0, DY = 0.0, DZ = 0.0),
                                           _F(GROUP_MA='LIG_LAT', DX = 0.0,  DY = 0.0, DZ = 0.0),
                                           ),
                               );

    TRACI[i] =  AFFE_CHAR_MECA(MODELE = MODX[i],
                                 FORCE_FACE = (_F(GROUP_MA = 'FACE_SUP', FY = -pressured, FZ = pressured),
                                            _F(GROUP_MA = 'FACE_INF', FY = pressured, FZ = -pressured),
                              ), 
                  );

    if(i!=(nbcalc-1)):# Applying dynamic calculation IF not last step
       EVOL[i]=DYNA_NON_LINE(reuse=EVOL[i],
                             ETAT_INIT  = _F(DEPL = CH1, SIGM=CH2,),
                             MODELE     = MODX[i],
                             CHAM_MATER = CHAMM[i],
                             MASS_DIAG  = 'OUI',
                             EXCIT      = (_F(CHARGE = RIGID[i]),
                                           _F(CHARGE = TRACI[i],
                                              FONC_MULT = TRACT_X),
                                           ),
                            COMPORTEMENT = (_F(RELATION = 'ELAS', 
                                               GROUP_MA = 'VOLUME'),
                                           ),
                            INCREMENT  = _F(LIST_INST = INSTANTX,
                                            INST_INIT = tdyn,
                                            INST_FIN = instfin[i],
                                            PRECISION = 1.E-9),
                            SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENT',
                                            FORMULATION='ACCELERATION',
                                            STOP_CFL = 'NON'),
                            CONVERGENCE= _F(ITER_GLOB_MAXI = 50),
                            NEWTON     = _F(MATRICE = 'TANGENTE',
                                            REAC_ITER=1),
                            ARCHIVAGE = _F(INST = instfin[i],
                                           PRECISION=1.E-15,)
                            );
                            
       EVOL[i] = EXTR_RESU(reuse=EVOL[i], # Restrict to result (recover)
                           RESULTAT=EVOL[i],
                           ARCHIVAGE=_F(INST=instfin[i],
                                        PRECISION=1.E-9),);										
                                                                               
       GG=[]                     # Pythonic table for ADVS		   
       TAB=[]                    # Pythonic table for ADV	   
       A_FISS = []               # Arrested cracks
       P_FISS = []               # cracks to propagate 
       N_FISS = [] # cracks NOT to propagate (G=0 ... arrested)
       PN_FISS= [] # cracks NOT to propagate (da< 5*h_min not beyond CZ)
       P_name=[]   # names of cracks to propagate
       N_name=[]   # names of cracks NOT to proagate (G=0)
       PN_name=[]  # names of cracks NOT to proagate (da< 5*h_min)
       ADVS=[None]*int_nb_cracks # List to test for arrest
       SIFF=[None]*int_nb_cracks # list of sif to add to SIF[][]
       ADV=[None]*int_nb_cracks  # List to test (da< 5*h_min)
       
       for k in range(len(FISS)): # Testing each crack in int crack lists
           
           F_S = "C_"+str(k)+"_"+str(0)+"_"+str(i) # Static crack
           F_D = "C_"+str(k)+"_"+str(1)+"_"+str(i) # Dynamic crack
           F_P = "P_"+str(k)+"_"+str(1)+"_"+str(i) # Propagating crack      
           print "   Quasi-static Crack - "+str(F_S)
           print "   Dynamic Crack - "+str(F_D)
           print "\n   ***Testing FISS " + str(F_D) + " *** \n"
       
    #--------------------------------------------------------------------------------#  		   
           print "\n   *** TEST-1 of 3 - Intiated or arrested? *** \n"
    #--------------------------------------------------------------------------------#		   
           if(i==0): # First Step
               ADVS[k]=CALC_G(RESULTAT=EVOL[i],
                          OPTION='K_G_COHE',
                          INST=instfin[i],
                          THETA=_F(FISSURE=eval(F_D),
                                   NUME_FOND=1,
                                   NB_POINT_FOND=nb_pts,
                                       R_SUP=h_min*10,
                                       R_INF=h_min*5), # R_INF is a dummy value, not used for cohesive
                          LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                                     LISSAGE_G='LAGRANGE_NO_NO',),
                          PRECISION=1.E-15,);

               tmp=ADVS[k].EXTR_TABLE().values()
               G=tmp['G']
               SIF_AT[k][i+1]=ADVS[k]		   
               GG=min(G)			   
               print GG				   
               DETRUIRE(CONCEPT=_F(NOM=ADVS[k]),INFO=1);
               
           if(i>=1): # All steps after	   
               if(eval(F_D) in N_FISS): # Cracks that havent intiated yet 
                   print "\n FISS "+str(F_D) + " is in N_FISS \n"  
                   ADVS[k]=CALC_G(RESULTAT=EVOL[i],
                          OPTION='K_G_COHE',
                          INST=instfin[i],
                          THETA=_F(FISSURE=eval(F_D),
                                   NUME_FOND=1,
                                   NB_POINT_FOND=nb_pts,
                                       R_SUP=h_min*10,
                                       R_INF=h_min*5), # R_INF is a dummy value, not used for cohesive
                          LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                                     LISSAGE_G='LAGRANGE_NO_NO',),
                          PRECISION=1.E-15,);

                   print "SIFF_AT = "+ str(SIF_AT)		   
                   tmp=ADVS[k].EXTR_TABLE().values()
                   G=tmp['G'] 
                   SIF_AT[k][i+1]=ADVS[k]		   	
                   GG=min(G)
                   print GG
                   DETRUIRE(CONCEPT=_F(NOM=ADVS[k]),INFO=1);		
                                                  
               elif(eval(F_D) in A_FISS):
                   print "\n FISS "+str(F_D) + " is in A_FISS \n"
                   print "SIFF = "+ str(SIF)
                   print "SIFF_AT = "+ str(SIF_AT) 				     
                   tmp=SIF[k][i]
                   GG=tmp				   
                   print GG						   

               elif(eval(F_D) in PN_FISS):
                   print "\n FISS "+str(F_D) + " is in PN_FISS \n" 
                   print "SIFF = "+ str(SIF)
                   print "SIFF_AT = "+ str(SIF_AT) 				    
                   tmp=SIF[k][i]
                   GG=tmp				   		   
                   print GG			
               
               else:#(eval(F_D) in P_FISS): 
                   print "\n FISS "+str(F_D) + " is in P_FISS \n" 
                   print "SIFF = "+ str(SIF) 
                   print "SIFF_AT = "+ str(SIF_AT)
                   tmp=SIF[k][i]
                   GG=tmp
                   print GG			   

    #-----------------------------    TEST 1 - What do do?   -------------------------#	

           if (GG==0): # is the lowest value 0, add elif if want tot use A_FISS
               N_FISS.append(eval(F_D)) # Populate not propagating list FISS[k][1+i]
               N_name.append(str(F_D))
               SIF[k][i+1]=SIF[k][i]    # Store SIF (for consitency) for next propagation
               print "\n   *** TEST-1 RESULT *** \n"
               print "\n   FISS "+str(F_D) + " has not intiated as G = "+str(GG)+" therefore len(NFISS) = "+str(len(N_FISS))+"\n"           
               print "\n   Memory location: "+str(N_FISS)
               
           else:
               print "\n   *** TEST-1 RESULT *** \n    "
               print "\n   "+ str(F_D) + " has intiated/re-started" 
               print "   G = " + str(GG)  
               print "\n   Moving on to TEST 2    \n"     

    #---------------------------------------------------------------------------------#  		   
           print "\n   *** TEST- 2 of 3 - Propgated beyond far enough (beyond cohesive zone)? *** \n"
    #---------------------------------------------------------------------------------#	
           FISP[k][i] = CO(F_P) # Assigning crack to list	   
           if(i==0) and (eval(F_D) not in N_FISS):
               print "\n    TEST 2: (i==0) and (" + str(F_D)+" not in N_FISS) = PROPAGATE!"
               ADV[k]= PROPA_FISS(MODELE=MODX[i],
                               METHODE_PROPA='DETECTION',
                               RESULTAT=EVOL[i],
                               ZONE_MAJ='TOUT',
                               TEST_MAIL='NON',
                               FISSURE=(_F(FISS_ACTUELLE=FISS[k][1+i],
                                          FISS_PROPAGEE=FISP[k][i],
                                              NB_POINT_FOND=nb_pts,
                                          TABLE=SIFIN[k],), # Intial table
                                          ),
                               INFO=1,);

               IMPR_TABLE(TABLE=ADV[k],TITRE=' CRACK_'+ str(k) + '\n Time ' + str(instfin[i]),)
               tab = ADV[k].EXTR_TABLE().values() # Convert table to python (PAR_LOT= 'NON')
               TAB=tab['CRACK0']                  # Accesses aster table
               print TAB                          # Prints table to mess file		
               DETRUIRE(CONCEPT=_F(NOM=ADV[k]),INFO=1);	# Destorys aster table
                    
                    
           elif (i>0) and (eval(F_D) not in N_FISS) and (eval(F_D) not in A_FISS):
               print "\n    TEST 2: (i>0) and ("+ str(F_D)+" not in N_FISS or A_FISS)= PROPAGATE!" 
               # So, if in P_FISS or PN_FISS propagate!
               ADV[k]= PROPA_FISS(MODELE=MODX[i],
                               METHODE_PROPA='DETECTION',
                               RESULTAT=EVOL[i],
                               ZONE_MAJ='TOUT',
                               TEST_MAIL='NON',
                               FISSURE=(_F(FISS_ACTUELLE=FISS[k][1+i],
                                          FISS_PROPAGEE=FISP[k][i],
                                              NB_POINT_FOND=nb_pts,
                                          TABLE=SIF_AT[k][i],), # Created by previous step
                                          ),
                               INFO=1,);	
               # Prints table to resu file
               IMPR_TABLE(TABLE=ADV[k],TITRE=' CRACK_'+ str(k) + '\n Time ' + str(instfin[i]),)
               tab = ADV[k].EXTR_TABLE().values()       # Convert table to python (PAR_LOT= 'NON')
               TAB=tab['CRACK0']
               print TAB                                # Prints table to mess file
               DETRUIRE(CONCEPT=_F(NOM=ADV[k]),INFO=1); # Destroys aster table 
           else:
               print "\n   In N_FISS not conducting Test 2  \n"	
               tab=[]# over-write tab						   

    #-----------------------------    TEST 2 - What do do?   -------------------------#       
           if(eval(F_D) in N_FISS): # If G=0 then it will be in N_FISS    
               print "\n   TEST 2 not conducted... reusing previous SIF"
               #---------------------------------------------------#
               if(i!=0):
                   DETRUIRE(CONCEPT=_F(NOM=SIF_AT[k][i]),INFO=1);
               #---------------------------------------------------#
               # Calculating SIF for cracks not arrested but not propagated far enough
               SIFF[k]=CALC_G(RESULTAT=EVOL[i],
                              OPTION='K_G_COHE',
                              INST=instfin[i],
                              THETA=_F(FISSURE=eval(F_D),#PN_FISS[k],#
                                       NUME_FOND=1,
                                       NB_POINT_FOND=nb_pts,
                                       R_SUP=h_min*10,
                                       R_INF=h_min*2), # R_INF is a dummy value, not used for cohesive
                              LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                                         LISSAGE_G='LAGRANGE_NO_NO',),);
                                                 
               IMPR_TABLE(TABLE=SIFF[k],UNITE=6,);
               print SIFF[k]

               IMPR_TABLE(TABLE=SIFF[k],UNITE=8,);			   
               tmp=SIFF[k].EXTR_TABLE().values()
               GG=tmp['G'] 
               SIF_AT[k][i+1]=SIFF[k]			   
               G=min(GG) 			   
               SIF[k][i+1]=G   # Store SIF (for consitency) for next propagation			   
               print "   min G = "+ str(GG)
               print "   SIF["+str(k)+"]["+str(i)+"+1] = " 
               print SIF[k][i+1]		               
           else:
               print "\n   Not in N_FISS"
               dD_A[k]=dD_A[k]+min(TAB) # sum(Propagation length) over i
               print"\n   Propagation length (dD_A) = " + str(dD_A[k]) + " of crack " + str(F_P)
               if (dD_A[k]>Prop_len) and (GG!=0):
                   print "\n   Propagation length > " + str(Prop_len)
                   dD_A[k]=0 # Reset prop_length sum counter 
                   P_FISS.append(FISP[k][i]) # Add crack to list to propagation
                   print "\n   Adding crack "+str(F_P)+" to P_FISS \n"			                   	
                   print P_FISS
                   print FISP[k][i]
                   P_name.append(str(F_P))
                   print "\n   Calculating new SIF for crack "+str(F_P)	
                   #---------------------------------------------------#
                   if(i!=0):# Destroys aster table after first rotation
                       DETRUIRE(CONCEPT=_F(NOM=SIF_AT[k][i]),INFO=1); 
                   #---------------------------------------------------#        
                                  
                   # Calculating SIF for cracks that have propagated far enough
                   SIFF[k]=CALC_G(RESULTAT=EVOL[i],
                              OPTION='K_G_COHE',
                              INST=instfin[i],
                              THETA=_F(FISSURE=eval(F_P),#P_FISS[k],
                                       NUME_FOND=1,
                                       NB_POINT_FOND=nb_pts,
                                       R_SUP=h_min*10,
                                       R_INF=h_min*2), # R_INF is a dummy value, not used for cohesive
                              LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                                         LISSAGE_G='LAGRANGE_NO_NO',),);
                   print SIFF[k]
                                             
                   IMPR_TABLE(TABLE=SIFF[k],UNITE=6,);
                   tmp=SIFF[k].EXTR_TABLE().values()
                   GG=tmp['G'] 
                   SIF_AT[k][i+1]=SIFF[k]				   
                   G=min(GG) 			   
                   SIF[k][i+1]=G   # Store SIF (for consitency) for next propagation
                   IMPR_TABLE(TABLE=SIFF[k],UNITE=8,); # Prints to mess file
                   print "   min G = "+ str(GG)
                   print "   SIF["+str(k)+"]["+str(i)+"+1] = "+str(SIF[k][i+1])           

               else:# (eval(F_D) not in P_FISS):
                   dD_A[k]=dD_A[k]+min(TAB) # Counter for length
                   print "\n   Propagation length < " + str(Prop_len)
                   print "\n   Adding crack "+str(F_P)+" to PN_FISS \n"		   
                   PN_FISS.append(FISP[k][i]) # Add crack to list NOT to propagation
                   PN_name.append(str(F_P))
                   
                   #---------------------------------------------------#
                   if(i!=0):
                       DETRUIRE(CONCEPT=_F(NOM=SIF_AT[k][i]),INFO=1); 
                   #---------------------------------------------------#                       
                   print "\n   Calculating new SIF for crack "+str(F_P)	                       
                   # Calculating SIF for cracks not arrested but not propagated far enough
                   SIFF[k]=CALC_G(RESULTAT=EVOL[i],
                              OPTION='K_G_COHE',
                              INST=instfin[i],
                              THETA=_F(FISSURE=eval(F_P),#PN_FISS[k],#
                                       NUME_FOND=1,
                                       NB_POINT_FOND=nb_pts,
                                       R_SUP=h_min*10,
                                       R_INF=h_min*2), # R_INF is a dummy value, not used for cohesive
                              LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                                         LISSAGE_G='LAGRANGE_NO_NO',),);
                                                 
                   IMPR_TABLE(TABLE=SIFF[k],UNITE=6,);
                   IMPR_TABLE(TABLE=SIFF[k],UNITE=8,);		
                   print SIFF[k]	   
                   tmp=SIFF[k].EXTR_TABLE().values()
                   GG=tmp['G'] 
                   SIF_AT[k][i+1]=SIFF[k]			   
                   G=min(GG) 			   	   
                   SIF[k][i+1]=G   # Store SIF (for consitency) for next propagation			   
                   print "   min G = "+ str(GG)
                   print "   SIF["+str(k)+"]["+str(i)+"+1] = " +str(SIF[k][i+1])               
                   
    #---------------------------------------------------------------------------------#  		   
           print "\n   *** TEST- 3 of 3 - Propagate cracks *** \n"
    #---------------------------------------------------------------------------------#	
                      
           if(eval(F_P) in P_FISS): # Only Propagate cracks if list populated
                        
               print "\n   P_FISS is populated with crack: "+str(F_P) 
               
               ff = "C_"+str(k)+"_"+str(0)+"_"+str(i+1)           
               print "\n   Creating new quasi-static crack " +str(ff)        
               crack_arg = tuple(P_FISS)
               DUMMOD=MODI_MODELE_XFEM(MODELE_IN=MO,
                                    FISSURE=eval(F_P),
                                    CONTACT='NON',);		 
               # q-static
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_P),#P_FISS[k], # This has been propagated
                                  FISS_PROPAGEE=CO(ff),
                                  NB_POINT_FOND=nb_pts,
                                  TABLE=SIFF[k],),
                      DA_MAX=da_max,
                      INFO=1,);
            
               FISS[k][0] = eval(ff) # FISS[0][0],FISS[0][1] always q-static
               print FISS[k][0] 
               
               # Dynamic
               # FISS[0] is q-static, Shifted for next dynamic FISS[2][n] 
               ff = "C_"+str(k)+"_"+str(1)+"_"+str(i+1)   
               print "\n   Creating new dynamic crack " +str(ff)           
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_P),#P_FISS[k],   # This has been propagated
                                   FISS_PROPAGEE=CO(ff),
                                   NB_POINT_FOND=nb_pts,
                                   TABLE=SIFF[k],),
                       DA_MAX=da_max,
                       INFO=1,);  

               FISS[k][2+i] = eval(ff)
               print FISS[k][2+i]

           if(eval(F_D) in N_FISS): # Crack not intiated yet
               print "\n   N_FISS is populated with crack: "+str(F_D)  
               if(G==0): # Bypassing issue with no cracks propagating at all and if it has not initiated
                   print "    Propagation_0 ...Crack not initiated using intial cracks in list - L_Int_Crack"
                   if(k==0):
                       F = "FISIN"	
                   if(k==1):					   	   
                       F = "FISIN2"					
                   # Dummy model is not XFEM for intial crack... avoids XFEM crack clash
                   DUMMOD=AFFE_MODELE(MAILLAGE = MA,
                                      AFFE =_F(GROUP_MA = ('VOLUME','FACE_SUP','FACE_INF'),
                                      PHENOMENE    = 'MECANIQUE',
                                      MODELISATION = '3D'),);					
                   # Quasi-static 
                   ff = "C_"+str(k)+"_"+str(0)+"_"+str(i+1) 
                   print "\n   Creating new quasi-static crack "  +str(ff)                   
                   PROPA_FISS(MODELE=DUMMOD,
                                  METHODE_PROPA='COHESIVE',
                                  CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                                  ZONE_MAJ='TOUT',
                                  TEST_MAIL='NON',
                                  FISSURE=_F(FISS_ACTUELLE=eval(F),
                                             FISS_PROPAGEE=CO(ff),
                                             NB_POINT_FOND=nb_pts,
                                             TABLE=SIFIN[0],),
                                  DA_MAX=da_max,
                                  INFO=1,);
                   FISS[k][0] = eval(ff)
                        
                   # split for data structure, to avoid a fake enriched model		 
                   # Dynamic
                   ff = "C_"+str(k)+"_"+str(1)+"_"+str(i+1) 	
                   print "\n   Creating new dynamic crack " +str(ff)                
                   PROPA_FISS(MODELE=DUMMOD,
                                  METHODE_PROPA='COHESIVE',
                                  CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                                  ZONE_MAJ='TOUT',
                                  TEST_MAIL='NON',
                                  FISSURE=_F(FISS_ACTUELLE=eval(F),
                                             FISS_PROPAGEE=CO(ff),
                                             NB_POINT_FOND=nb_pts,
                                             TABLE=SIFIN[1],),
                                  DA_MAX=da_max,
                                  INFO=1,);
                   FISS[k][2+i] = eval(ff)					   

               else: # It has arrested so can still be a XFEM crack
                   
                   DUMMOD=MODI_MODELE_XFEM(MODELE_IN=MO,
                                        FISSURE=eval(F_P),#crack_arg,
                                        CONTACT='NON',);		 
                                        
                   ff = "C_"+str(k)+"_"+str(0)+"_"+str(i+1)
                   print "\n   Creating new quasi-static crack"  +str(ff)      
               # q-static
                   PROPA_FISS(MODELE=DUMMOD,
                           METHODE_PROPA='COHESIVE',
                           CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                           ZONE_MAJ='TOUT',
                           TEST_MAIL='NON',
                           FISSURE=_F(FISS_ACTUELLE=eval(F_D),#FISIN,#,#N_FISS[k],
                                      FISS_PROPAGEE=CO(ff),
                                      NB_POINT_FOND=nb_pts,
                                      TABLE=SIFF[k],),
                           DA_MAX=da_max,
                          INFO=1,);
                
                   FISS[k][0] = eval(ff) # FISS[0][0],FISS[0][1] always q-static
                   print FISS[k][0] 
                   
               # Dynamic

                   print 'k is %d'%k
                   # FISS[0] is q-static, Shifted for next dynamic FISS[2][n]
                   ff = "C_"+str(k)+"_"+str(1)+"_"+str(i+1)
                   print "\n   Creating new dynamic crack"  +str(ff)    
                   print f            
                   PROPA_FISS(MODELE=DUMMOD,
                           METHODE_PROPA='COHESIVE',
                           CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                           ZONE_MAJ='TOUT',
                           TEST_MAIL='NON',
                           FISSURE=_F(FISS_ACTUELLE=eval(F_D),#FISIN2,#,#N_FISS[k],
                                       FISS_PROPAGEE=CO(ff),
                                       NB_POINT_FOND=nb_pts,
                                       TABLE=SIFF[k],),
                           DA_MAX=da_max,
                           INFO=1,);  

                   FISS[k][2+i] = eval(ff)
                   print FISS[k][2+i]
                       
           if(eval(F_P) in PN_FISS): # No angle calculation but propagate
               print "\n   PN_FISS is populated with crack: "+str(F_P) 			   
               crack_arg = tuple(PN_FISS)
               DUMMOD=MODI_MODELE_XFEM(MODELE_IN=MO,
                                    FISSURE=eval(F_P),#crack_arg,
                                    CONTACT='NON',);		 
               ff = "C_"+str(k)+"_"+str(0)+"_"+str(i+1)  
               print "\n   Creating new quasi-static crack "  +str(ff)    
           # q-static
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_P),#PN_FISS[k],
                                  FISS_PROPAGEE=CO(ff),
                                  NB_POINT_FOND=nb_pts,
                                  TABLE=SIFF[k],),
                       DA_MAX=da_max,
                      INFO=1,);
            
               FISS[k][0] = eval(ff) # FISS[0][0],FISS[0][1] always q-static
               print FISS[k][0] 
               
           # Dynamic
               # FISS[0] is q-static, Shifted for next dynamic FISS[2][n]
               ff = "C_"+str(k)+"_"+str(1)+"_"+str(i+1)
               print "\n   Creating new dynamic crack "  +str(ff)    
               print f            
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_P),#PN_FISS[k],
                                   FISS_PROPAGEE=CO(ff),
                                   NB_POINT_FOND=nb_pts,
                                   TABLE=SIFF[k],),
                       DA_MAX=da_max,
                       INFO=1,);  

               FISS[k][2+i] = eval(ff)
               print FISS[k][2+i]

           if(eval(F_P) in A_FISS): # Arrested for i
               print "\n   A_FISS is populated with crack: "+str(F_P)			   
               crack_arg = tuple(A_FISS)
               DUMMOD=MODI_MODELE_XFEM(MODELE_IN=MO,
                                    FISSURE=eval(F_D),#crack_arg,
                                    CONTACT='NON',);		 
               ff = "C_"+str(k)+"_"+str(0)+"_"+str(i+1)  
               print "\n   Creating new quasi-static crack"  +str(ff)    
           # q-static
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_D),#A_FISS[k],
                                  FISS_PROPAGEE=CO(ff),
                                  NB_POINT_FOND=nb_pts,
                                  TABLE=SIFF[k],),
                       DA_MAX=da_max,
                      INFO=1,);
            
               FISS[k][0] = eval(ff) # FISS[0][0],FISS[0][1] always q-static
               print 'k is %d'%k
               print FISS[k][0] 
               
           # Dynamic

               print 'k is %d'%k
               # FISS[0] is q-static, Shifted for next dynamic FISS[2][n]
               ff = "C_"+str(k)+"_"+str(1)+"_"+str(i+1)
               print "\n   Creating new dynamic crack"  +str(ff)    
               print f            
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_D),#A_FISS[k],
                                   FISS_PROPAGEE=CO(ff),
                                   NB_POINT_FOND=nb_pts,
                                   TABLE=SIFF[k],),
                       DA_MAX=da_max,
                       INFO=1,);  

               FISS[k][2+i] = eval(ff)
               print FISS[k][2+i]		   
         
           if(eval(F_P) in N_FISS): # In N_FISS as F_P## Arrested for i ignoring A_FISS
               print "\n   N_FISS is populated with crack: "+str(F_P)			   
               crack_arg = tuple(A_FISS)
               DUMMOD=MODI_MODELE_XFEM(MODELE_IN=MO,
                                    FISSURE=eval(F_D),#crack_arg,
                                    CONTACT='NON',);		 
               ff = "C_"+str(k)+"_"+str(0)+"_"+str(i+1)  
               print "\n   Creating new quasi-static crack "  +str(ff)    
           # q-static
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_D),#A_FISS[k],
                                  FISS_PROPAGEE=CO(ff),
                                  NB_POINT_FOND=nb_pts,
                                  TABLE=SIFF[k],),
                       DA_MAX=da_max,
                      INFO=1,);
            
               FISS[k][0] = eval(ff) # FISS[0][0],FISS[0][1] always q-static
               print 'k is %d'%k
               print FISS[k][0] 
               
           # Dynamic

               print 'k is %d'%k
               # FISS[0] is q-static, Shifted for next dynamic FISS[2][n]
               ff = "C_"+str(k)+"_"+str(1)+"_"+str(i+1)
               print "\n   Creating new dynamic crack "  +str(ff)    
               print f            
               PROPA_FISS(MODELE=DUMMOD,
                       METHODE_PROPA='COHESIVE',
                       CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
                       ZONE_MAJ='TOUT',
                       TEST_MAIL='NON',
                       FISSURE=_F(FISS_ACTUELLE=eval(F_D),#A_FISS[k],
                                   FISS_PROPAGEE=CO(ff),
                                   NB_POINT_FOND=nb_pts,
                                   TABLE=SIFF[k],),
                       DA_MAX=da_max,
                       INFO=1,);  

               FISS[k][2+i] = eval(ff)
               print FISS[k][2+i]		   

#-----------------------------    TEST 3 - What do do?   -------------------------#	
           DETRUIRE(CONCEPT=_F(NOM=DUMMOD),INFO=1);	# Model redefined each crack
       print "\n #-----------------------------------------------------------"
       print "   SUMMARY:- Propagation_" + str(i)	   	   
       print "\n #-----------------------------------------------------------"	   
       crack_arg= tuple(P_FISS + N_FISS + PN_FISS) 
       cnames= tuple(P_name + N_name + PN_name) 
       print "   COUNT TEST Cracks for next nbcalc " + str(len(crack_arg))+ " = "+ str(int_nb_cracks)
       print "   List of cracks for next time step"+ str(cnames)	
       print "   Memory locations for cracks: "+str(crack_arg)
       ps=[]
       ps.append("Propagation_" + str(i))
       ps.append("dD_A = " + str(dD_A))			   
       ps.append("N_FISS:" + str(N_name))
       ps.append("NP_FISS:" + str(PN_name))
       ps.append("P_FISS:" + str(P_name))
       ps.append("NEW_CRACK = "+"FISS["+str(ff)+"][DYNAMIC]" )		   		   
       Prop_sum.append(ps) # adding to total summary
       print "#----------------------------------------------------------- \n"	

    DETRUIRE(CONCEPT=_F(NOM=CH1),INFO=1);
    DETRUIRE(CONCEPT=_F(NOM=CH2),INFO=1);
    DETRUIRE(CONCEPT=_F(NOM=MODK),INFO=1);
    DETRUIRE(CONCEPT=_F(NOM=CTX),INFO=1);      
    DETRUIRE(CONCEPT=_F(NOM=CHAMPMA),INFO=1);
    DETRUIRE(CONCEPT=_F(NOM=RIGIDE),INFO=1);
    DETRUIRE(CONCEPT=_F(NOM=TRACTION),INFO=1);      
    del P_FISS, N_FISS, PN_FISS, GG, tmp, tab, ps
    del P_name, N_name, PN_name 
    
#---------------------------------------------------------------------------------#
# IF last step 	
if(i==(nbcalc-1)):	
    print "Last time step: \n"
    EVOL[i]=DYNA_NON_LINE(reuse=EVOL[i],
                             ETAT_INIT  = _F(DEPL = CH1, SIGM=CH2,),
                             MODELE     = MODX[i],
                             CHAM_MATER = CHAMM[i],
                             MASS_DIAG  = 'OUI',
                             EXCIT      = (_F(CHARGE = RIGID[i]),
                                           _F(CHARGE = TRACI[i],
                                              FONC_MULT = TRACT_X),
                                           ),
                            COMPORTEMENT = (_F(RELATION = 'ELAS', 
                                               GROUP_MA = 'VOLUME'),
                                           ),
                            INCREMENT  = _F(LIST_INST = INSTANTX,
                                            INST_INIT = tdyn,
                                            INST_FIN = instfin[i],
                                            PRECISION = 1.E-9),
                            SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENT',
                                            FORMULATION='ACCELERATION',
                                            STOP_CFL = 'NON'),
                            CONVERGENCE= _F(ITER_GLOB_MAXI = 50),
                            NEWTON     = _F(MATRICE = 'TANGENTE',
                                            REAC_ITER=1),
                            ARCHIVAGE = _F(LIST_INST = INS_AR,
                                           PRECISION=1.E-9,
                                           CHAM_EXCLU='VARI_ELGA')
                            );
                            
        # Restrict to result (recover)
    EVOL[i] = EXTR_RESU(reuse=EVOL[i],
                           RESULTAT=EVOL[i],
                           ARCHIVAGE=_F(LIST_INST = INS_AR,
                                        PRECISION=1.E-7,)); 

# Prints a total summary each nbcalc
print"\n =========================================================== \n"
print "   Propagation "+str(i)+" of "+str(nbcalc-1)+" - PHASE 2 ENDED  \n   TOTAL PROPAGATION SUMMARY \n"
for PS in range(len(Prop_sum)):
    if (PS % 2 != 0): # Modolo of number is not zero
        print Prop_sum[PS] 			   			   	   		   						   
print"\n =========================================================== \n"	   
   

print "\n #===========================================================# \n"
print "   PHASE 3 - Post processing"
print "\n #===========================================================# \n"
# recovering level sets (numbering)
MA_XFEM=POST_MAIL_XFEM(MODELE=MODX[nbcalc-1]);

# Create model
MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     	AFFE=_F(TOUT='OUI',
                        	     PHENOMENE='MECANIQUE',
                    	         MODELISATION='3D'));
                             
# process and calculate results fields
RESXFEM1=POST_CHAM_XFEM(RESULTAT=EVOL[nbcalc-1],
                	        MODELE_VISU=MOD_VISU);
                        
RESXFEM1=CALC_CHAMP(reuse=RESXFEM1,
            	        RESULTAT=RESXFEM1,
        	            CONTRAINTE='SIGM_NOEU',
      	              CRITERES=('SIEQ_ELGA','SIEQ_ELNO'))

# Print results               
IMPR_RESU(FORMAT='MED',
 	         RESU=_F(RESULTAT=RESXFEM1),);

# Delete these so we can repeat each step of propagation
DETRUIRE(CONCEPT=_F(NOM=MA_XFEM),INFO=1);
DETRUIRE(CONCEPT=_F(NOM=MOD_VISU),INFO=1);
DETRUIRE(CONCEPT=_F(NOM=RESXFEM1),INFO=1);


FIN();


# ------------------------------------------------------------------------------------------
                                                                                
                                                                                
             -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --             
                                                                                
                     Version 12.0.23 modifiée le 31/08/2016                     
                     révision 1f0af493 - branche 'default'                      
                         Copyright EDF R&D 1991 - 2016                          
                                                                                
                    Exécution du : Wed Oct 12 17:59:12 2016                     
                   Nom de la machine : mbgnktc2-OptiPlex-9010                   
                              Architecture : 64bit                              
                          Type de processeur : x86_64                           
                Système d'exploitation : Linux 3.13.0-85-generic                
                        Langue des messages : en (UTF-8)                        
                                                                                
                           Version de Python : 2.7.6                            
                            Version de NumPy : 1.8.2                            
                           Parallélisme MPI : inactif                           
                          Parallélisme OpenMP : actif                           
                        Nombre de processus utilisés : 7                        
                     Version de la librairie HDF5 : 1.8.10                      
                      Version de la librairie MED : 3.0.8                       
                     Version de la librairie MUMPS : 4.10.0                     
                    Version de la librairie SCOTCH : 5.1.10                     

                 Mémoire limite pour l'exécution : 13250.00 Mo                  
                    consommée par l'initialisation : 0.00 Mo                    
                  par les objets du jeu de commandes : 0.00 Mo                  
                reste pour l'allocation dynamique : 12828.87 Mo                 
                Taille limite des fichiers d'échange : 97.66 Go                 
                                                                                

  # ------------------------------------------------------------------------------------------
  # Commande No :  0001            Concept de type : -
  # ------------------------------------------------------------------------------------------
  DEBUT(PAR_LOT='NON',
        IGNORE_ALARM=('SUPERVIS_22', 'SUPERVIS_1', 'XFEM_94', 'MECANONLINE_2'),
        CODE=_F(VISU_EFICAS='NON',
                NIV_PUB_WEB='INTERNET',),
        INFO=1,
        RESERVE_CPU=_F(BORNE=900,),
        MEMOIRE=_F(TAILLE_BLOC=800.0,
                   TAILLE_GROUP_ELEM=1000,),
        MESURE_TEMPS=_F(MOYENNE='NON',
                        NIVE_DETAIL=1,),
        IMPR_MACRO='NON',)

   
   !-------------------------------------------------------------------------------------------!
   ! <I> <SUPERVIS_22>                                                                         !
   !                                                                                           !
   !    Les mots-clés facteurs CODE et DEBUG dans DEBUT/POURSUITE sont réservés aux cas-tests. !
   !    Il ne faut pas les utiliser dans les études car ils modifient certaines valeurs par    !
   !    défaut des commandes DEBUT/POURSUITE qui ont des conséquences sur le comportement      !
   !    en cas d'erreur ou sur les performances.                                               !
   !-------------------------------------------------------------------------------------------!
   

  Valeur initiale du temps CPU maximum =   86400 secondes
  Valeur du temps CPU maximum passé aux commandes =   86390 secondes
  Réserve CPU prévue = 10 secondes

  Début de lecture...


     Réouverture de la base

     Nom de la base                          :  ELEMBASE
     Créée avec la version                   :  12.00.23
     Nombre d'enregistrements utilisés       :  24
     Nombre d'enregistrements maximum        :  512
     Longueur d'enregistrement (octets)      :  819200
     Nombre d'identificateurs utilisés       :  123
     Taille maximum du répertoire            :  300
     Pourcentage d'utilisation du répertoire :  41 %


     Fermeture de la base

     Nom de la base                          :  ELEMBASE
     Nombre d'enregistrements utilisés       :  24
     Nombre d'enregistrements maximum        :  512
     Longueur d'enregistrement (octets)      :  819200
     Nombre total d'accès en lecture         :  49
     Volume des accès en lecture             :         38.28 Mo.
     Nombre total d'accès en écriture        :  3
     Volume des accès en écriture            :          2.34 Mo.
     Nombre d'identificateurs utilisés       :  123
     Taille maximum du répertoire            :  300
     Pourcentage d'utilisation du répertoire :  41 %

  Relecture des catalogues des éléments faite.

  Fin de lecture (durée  0.000000  s.) 
  # Mémoire (Mo) :   452.82 /   448.45 /    31.39 /    19.04 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0001   user+syst:        0.03s (syst:        0.03s, elaps:        0.02s)
  # ------------------------------------------------------------------------------------------

 #===========================================================# 

   PHASE 2 - Multiple crack Propagation

 #===========================================================# 


  # ------------------------------------------------------------------------------------------
  # Commande No :  0002            Concept de type : maillage_sdaster
  # ------------------------------------------------------------------------------------------
  MA1 = LIRE_MAILLAGE(FORMAT='MED',
                      INFO_MED=1,
                      INFO=1,
                      UNITE=20,
                      VERI_MAIL=_F(APLAT=1.E-3,
                                   VERIF='OUI',),
                      )

  ====== VERIFICATION DU MAILLAGE ======


------------ MAILLAGE MA1      - IMPRESSIONS NIVEAU  1 ------------

ME-12-OCTO-2016 17:59:12                                                        

NOMBRE DE NOEUDS                      141093

NOMBRE DE MAILLES                     199106
                              SEG2                 7626
                              QUAD4               99480
                              HEXA8               92000

NOMBRE DE GROUPES DE NOEUDS                1
                              GM1261                               6

NOMBRE DE GROUPES DE MAILLES              13
                              GM123                                2
                              GM1271                             160
                              hoopf_out                            2
                              hoop_in                              2
                              GM125                                2
                              GM126                                2
                              GM127                               80
                              GM125_1                              2
                              GM128                            92000
                              ENRI_ALL                         16000
                              XFEM_ENRI2                        9600
                              XFEM_ENRI                         6400
                              GM124                                2

--------------------------------------------------------------------------------

  # Mémoire (Mo) :   491.48 /   474.24 /    69.23 /    47.93 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0002   user+syst:        0.53s (syst:        0.02s, elaps:        0.53s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0003            Concept de type : maillage_sdaster
  # ------------------------------------------------------------------------------------------
  MA = COPIER(CONCEPT=MA1,
              INFO=1,)

  # Mémoire (Mo) :   499.56 /   499.56 /    77.69 /    47.93 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0003   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0004            Concept de type : maillage_sdaster
  # ------------------------------------------------------------------------------------------
  MA = DEFI_GROUP(reuse=MA,
                  MAILLAGE=MA,
                  CREA_GROUP_NO=(_F(GROUP_MA=('LIG_LAT', ),
                                    CRIT_NOEUD='TOUS',),
                                 _F(GROUP_NO=('GM1261', ),
                                    NOM='LIG_HAUT',
                                    ),
                                 _F(GROUP_MA=('LIG_LAT', ),
                                    NOM=('ABC', ),
                                    CRIT_NOEUD='TOUS',),
                                 ),
                  CREA_GROUP_MA=(_F(NOM='FACE_SUP',
                                    GROUP_MA='GM123',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='FACE_INF',
                                    GROUP_MA='GM124',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='FONDINI_0',
                                    GROUP_MA='GM125',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='FONDINI_1',
                                    GROUP_MA='GM125_1',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='LIG_LAT',
                                    GROUP_MA='GM1271',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='VOLUME',
                                    GROUP_MA='GM128',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='ENRICH',
                                    GROUP_MA='XFEM_ENRI',
                                    TYPE_MAILLE='TOUT',),
                                 _F(NOM='ENR_ALL',
                                    GROUP_MA='ENRI_ALL',
                                    TYPE_MAILLE='TOUT',),
                                 ),
                  ALARME='OUI',)



NOMBRE  DE GROUPES DE MAILLES CREES :      8
=============================================

               ------------------------------------------------------
               !         NOM DU GROUPE         ! NBRE DE MAILLES DU !
               !            MAILLES            !     GROUPE_MA      !
               ------------------------------------------------------
               !  FACE_SUP                     !         2          !
               !  FACE_INF                     !         2          !
               !  FONDINI_0                    !         2          !
               !  FONDINI_1                    !         2          !
               !  LIG_LAT                      !       160          !
               !  VOLUME                       !     92000          !
               !  ENRICH                       !      6400          !
               !  ENR_ALL                      !     16000          !
               ------------------------------------------------------



NOMBRE  DE GROUPES DE NOEUDS CREES :      3
=======================================

               ------------------------------------------------------
               !         NOM DU GROUPE         ! NBRE DE NOEUDS DU  !
               !            NOEUDS             !      GROUPE_NO     !
               ------------------------------------------------------
               !  LIG_LAT                      !       243          !
               !  LIG_HAUT                     !         6          !
               !  ABC                          !       243          !
               ------------------------------------------------------

  # Mémoire (Mo) :   503.68 /   500.70 /    81.68 /    47.93 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0004   user+syst:        0.01s (syst:        0.00s, elaps:        0.02s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0005            Concept de type : modele_sdaster
  # ------------------------------------------------------------------------------------------
  MO = AFFE_MODELE(MAILLAGE=MA,
                   AFFE=_F(GROUP_MA=('VOLUME', 'FACE_SUP', 'FACE_INF'),
                           PHENOMENE='MECANIQUE',
                           MODELISATION=('3D', ),),
                   INFO=1,
                   VERI_JACOBIEN='OUI',
                   PARTITION=_F(PARALLELISME='GROUP_ELEM',),
                   )


 SUR LES       199106 MAILLES DU MAILLAGE MA      
    ON A DEMANDE L'AFFECTATION DE        92004
    ON A PU EN AFFECTER                  92004

    MODELISATION      ELEMENT FINI      TYPE MAILLE          NOMBRE
                      MECA_FACE4        QUAD4                     4
    3D                MECA_HEXA8        HEXA8                 92000

#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.10      0.01      0.09
  # Mémoire (Mo) :   570.72 /   561.20 /    99.99 /    56.68 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0005   user+syst:        0.66s (syst:        0.46s, elaps:        0.17s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0006            Concept de type : mater_sdaster
  # ------------------------------------------------------------------------------------------
  BETON = DEFI_MATERIAU(RUPT_FRAG=_F(SIGM_C=25,
                                     GC=0.14,
                                     PENA_LAGR=8928.571428571428,
                                     CINEMATIQUE='UNILATER',
                                     PENA_CONTACT=1.0,
                                     RIGI_GLIS=10.0,),
                        ELAS=_F(E=1.E4,
                                RHO=1.8E-09,
                                NU=0.2,),
                        INFO=1,)


 MATERIAU : BETON   
 RELATION DE COMPORTEMENT: RUPT_FRAG       
                           ELAS            

  # Mémoire (Mo) :   570.72 /   561.20 /    99.99 /    56.68 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0006   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0007            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  SIFIN_0 = CREA_TABLE(LISTE=(_F(PARA='ABSC_CURV',
                                 LISTE_R=(0.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='K1',
                                 LISTE_R=(1.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='K2',
                                 LISTE_R=(0.0, 0.0),
                                 TYPE_K='K8',),
                              _F(PARA='K3',
                                 LISTE_R=(0.0, 0.0),
                                 TYPE_K='K8',),
                              _F(PARA='G',
                                 LISTE_R=(1.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='BETA',
                                 LISTE_R=(0.0, 0.0),
                                 TYPE_K='K8',),
                              _F(PARA='G_IRWIN',
                                 LISTE_R=(1.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='NUME_FOND',
                                 LISTE_I=(1, 1),
                                 TYPE_K='K8',),
                              _F(PARA='NUME_ORDRE',
                                 LISTE_I=(1, 1),
                                 TYPE_K='K8',),
                              _F(PARA='NUM_PT',
                                 LISTE_I=(1, 2),
                                 TYPE_K='K8',),
                              ),
                       TYPE_TABLE='TABLE',)

  # Mémoire (Mo) :   570.72 /   561.20 /    99.99 /    56.68 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0007   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0008            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  SIFIN_1 = CREA_TABLE(LISTE=(_F(PARA='ABSC_CURV',
                                 LISTE_R=(0.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='K1',
                                 LISTE_R=(1.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='K2',
                                 LISTE_R=(0.0, 0.0),
                                 TYPE_K='K8',),
                              _F(PARA='K3',
                                 LISTE_R=(0.0, 0.0),
                                 TYPE_K='K8',),
                              _F(PARA='G',
                                 LISTE_R=(1.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='BETA',
                                 LISTE_R=(0.0, 0.0),
                                 TYPE_K='K8',),
                              _F(PARA='G_IRWIN',
                                 LISTE_R=(1.0, 1.0),
                                 TYPE_K='K8',),
                              _F(PARA='NUME_FOND',
                                 LISTE_I=(1, 1),
                                 TYPE_K='K8',),
                              _F(PARA='NUME_ORDRE',
                                 LISTE_I=(1, 1),
                                 TYPE_K='K8',),
                              _F(PARA='NUM_PT',
                                 LISTE_I=(1, 2),
                                 TYPE_K='K8',),
                              ),
                       TYPE_TABLE='TABLE',)

  # Mémoire (Mo) :   570.72 /   561.20 /    99.99 /    56.68 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0008   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0009            Concept de type : fiss_xfem
  # ------------------------------------------------------------------------------------------
  FISIN = DEFI_FISS_XFEM(TYPE_DISCONTINUITE='COHESIF',
                         GROUP_MA_ENRI='ENRI_ALL',
                         MODELE=MO,
                         DEFI_FISS=_F(FORM_FISS='DEMI_PLAN',
                                      FRONT_INI='FONDINI_0',
                                      DTAN=(0.0, 365.0, 0.0),
                                      PFON=(0.0, 0.0, 0.9),
                                      NORMALE=(0.0, 0.0, 1.0),),
                         INFO=1,)


     Nombre de points du fond de fissure : 3

     Nombre de fonds de fissure : 1

     Coordonnées des points des fonds de fissure

     fond de fissure : 1
       X             Y             Z             S
  -0.10000E+02   0.00000E+00   0.10000E+01   0.00000E+00
   0.19984E-13   0.00000E+00   0.10000E+01   0.10000E+02
   0.10000E+02   0.00000E+00   0.10000E+01   0.20000E+02
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.88      0.43      0.39
  # Mémoire (Mo) :   736.43 /   640.27 /   265.36 /    93.03 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0009   user+syst:        2.37s (syst:        0.46s, elaps:        1.91s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0010            Concept de type : fiss_xfem
  # ------------------------------------------------------------------------------------------
  FISIN2 = DEFI_FISS_XFEM(TYPE_DISCONTINUITE='COHESIF',
                          GROUP_MA_ENRI='ENRI_ALL',
                          MODELE=MO,
                          DEFI_FISS=_F(FORM_FISS='DEMI_PLAN',
                                       FRONT_INI='FONDINI_1',
                                       DTAN=(0.0, -365.0, 0.0),
                                       PFON=(0.0, -363.0, 0.9),
                                       NORMALE=(0.0, 0.0, 1.0),),
                          INFO=1,)


     Nombre de points du fond de fissure : 3

     Nombre de fonds de fissure : 1

     Coordonnées des points des fonds de fissure

     fond de fissure : 1
       X             Y             Z             S
  -0.10000E+02   0.36300E+03   0.10000E+01   0.00000E+00
  -0.19984E-13   0.36300E+03   0.10000E+01   0.10000E+02
   0.10000E+02   0.36300E+03   0.10000E+01   0.20000E+02
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.85      0.44      0.38
  # Mémoire (Mo) :   815.23 /   719.21 /   344.27 /    93.03 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0010   user+syst:        2.36s (syst:        0.46s, elaps:        1.90s)
  # ------------------------------------------------------------------------------------------
FISS - 
[[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]

  # ------------------------------------------------------------------------------------------
  # Commande No :  0011            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=MO,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_0_0_0),
                        TABLE=SIFIN_0,
                        FISS_ACTUELLE=FISIN,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  FISIN
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: MO      
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     2     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     3     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE MO      

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043234587914794E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                  476
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.07      0.46      0.61
  # Mémoire (Mo) :  1000.40 /   800.34 /   527.04 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0011   user+syst:        2.82s (syst:        0.50s, elaps:        2.35s)
  # ------------------------------------------------------------------------------------------
j is 0

  # ------------------------------------------------------------------------------------------
  # Commande No :  0016            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=MO,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_1_0_0),
                        TABLE=SIFIN_1,
                        FISS_ACTUELLE=FISIN2,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  FISIN2
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: MO      
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     2     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     3     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE MO      

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043234587914794E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                   97
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.09      0.46      0.61
  # Mémoire (Mo) :  1079.49 /   879.43 /   605.94 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0016   user+syst:        2.78s (syst:        0.52s, elaps:        2.30s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0021            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=MO,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_0_1_0),
                        TABLE=SIFIN_0,
                        FISS_ACTUELLE=FISIN,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  FISIN
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: MO      
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     2     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     3     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE MO      

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043234587914794E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                  476
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.09      0.44      0.61
  # Mémoire (Mo) :  1158.43 /   958.37 /   684.85 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0021   user+syst:        2.76s (syst:        0.47s, elaps:        2.29s)
  # ------------------------------------------------------------------------------------------
j is 1

  # ------------------------------------------------------------------------------------------
  # Commande No :  0026            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=MO,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_1_1_0),
                        TABLE=SIFIN_1,
                        FISS_ACTUELLE=FISIN2,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  FISIN2
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: MO      
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     2     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     3     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE MO      

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043234587914794E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                   97
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.08      0.45      0.61
  # Mémoire (Mo) :  1237.36 /  1037.30 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0026   user+syst:        2.78s (syst:        0.53s, elaps:        2.30s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0031            Concept de type : fonction_sdaster
  # ------------------------------------------------------------------------------------------
  TRACT_T = DEFI_FONCTION(PROL_DROITE='LINEAIRE',
                          VALE=(0.0, 0.0, 1.E-05, 1.0),
                          NOM_PARA='INST',
                          PROL_GAUCHE='LINEAIRE',
                          INFO=1,
                          INTERPOL=('LIN', ),
                          NOM_RESU='TOUTRESU',
                          VERIF='CROISSANT',)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0031   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0032            Concept de type : listr8_sdaster
  # ------------------------------------------------------------------------------------------
  INSTANTS = DEFI_LIST_REEL(DEBUT=0.0,
                            INTERVALLE=_F(NOMBRE=1,
                                          JUSQU_A=1.E-05,),
                            INFO=1,)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0032   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0033            Concept de type : listr8_sdaster
  # ------------------------------------------------------------------------------------------
  INS_ARCH = DEFI_LIST_REEL(DEBUT=0.0,
                            INTERVALLE=_F(NOMBRE=1,
                                          JUSQU_A=1.E-05,),
                            INFO=1,)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0033   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0034            Concept de type : fonction_sdaster
  # ------------------------------------------------------------------------------------------
  TRACT_X = DEFI_FONCTION(PROL_DROITE='LINEAIRE',
                          VALE=(0.0, 0.0, 1.E-05, 1.0, 5.E-05, 1.0),
                          NOM_PARA='INST',
                          PROL_GAUCHE='LINEAIRE',
                          INFO=1,
                          INTERPOL=('LIN', ),
                          NOM_RESU='TOUTRESU',
                          VERIF='CROISSANT',)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0034   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0035            Concept de type : listr8_sdaster
  # ------------------------------------------------------------------------------------------
  INSTANTX = DEFI_LIST_REEL(DEBUT=0.0,
                            INTERVALLE=(_F(NOMBRE=1,
                                           JUSQU_A=1.E-05,),
                                        _F(NOMBRE=2000,
                                           JUSQU_A=5.E-05,),
                                        ),
                            INFO=1,)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0035   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0036            Concept de type : listr8_sdaster
  # ------------------------------------------------------------------------------------------
  INS_ARCX = DEFI_LIST_REEL(DEBUT=0.0,
                            INTERVALLE=(_F(NOMBRE=1,
                                           JUSQU_A=1.E-05,),
                                        _F(NOMBRE=200,
                                           JUSQU_A=5.E-05,),
                                        ),
                            INFO=1,)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0036   user+syst:        0.01s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0037            Concept de type : listr8_sdaster
  # ------------------------------------------------------------------------------------------
  INS_AR = DEFI_LIST_REEL(DEBUT=1.02E-05,
                          INTERVALLE=_F(NOMBRE=199,
                                        JUSQU_A=5.E-05,),
                          INFO=1,)

  # Mémoire (Mo) :  1237.36 /  1037.44 /   763.75 /   111.33 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0037   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------
#-----------------------------------------------------------
   Propagation_0
#-----------------------------------------------------------
FISS - [[<Cata.cata.fiss_xfem object at 0x7f18eed05290>, <Cata.cata.fiss_xfem object at 0x7f18d7e3ef90>, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [<Cata.cata.fiss_xfem object at 0x7f18eed05310>, <Cata.cata.fiss_xfem object at 0x7f18eed05350>, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]
Crack Argument - (<Cata.cata.fiss_xfem object at 0x7f18eed05290>, <Cata.cata.fiss_xfem object at 0x7f18eed05310>)

  # ------------------------------------------------------------------------------------------
  # Commande No :  0038            Concept de type : modele_sdaster
  # ------------------------------------------------------------------------------------------
  MODK = MODI_MODELE_XFEM(MODELE_IN=MO,
                          CONTACT='OUI',
                          FISSURE=(C_0_0_0, C_1_0_0),
                          INFO=1,
                          CRITERE=1.1E-09,)

 IMPRESSION DES ELEMENTS X-FEM 
                    TYPE      XH      XT     XHT     XHC     XTC    XHTC     XH1     XH2     XH3     XH4    XH2C    XH3C    XH4C
                   HEXA8     152       0       0      68       0       0     0       0       0       0       0       0       0
   
 RECHERCHE DES DDLS HEAVISIDE A ANNULER
 NOMBRE DE NOEUDS OU LES DDLS H SONT MIS A ZERO :                    0
 NOMBRE DE SOUS-ELEMENTS DE PEAU RE-ORIENTES :                    0
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.05
  # Mémoire (Mo) :  1294.34 /  1099.06 /   820.44 /   167.58 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0038   user+syst:        1.26s (syst:        0.50s, elaps:        0.79s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0039            Concept de type : char_contact
  # ------------------------------------------------------------------------------------------
  CTX = DEFI_CONTACT(FORMULATION='XFEM',
                     FROTTEMENT='SANS',
                     MODELE=MODK,
                     ZONE=(_F(FISS_MAIT=C_0_0_0,
                              INTEGRATION='GAUSS',
                              ALGO_CONT='CZM',
                              ALGO_LAGR='VERSION2',
                              ORDRE_INT=4,
                              RELATION='CZM_LIN_REG',
                              TOLE_PROJ_EXT=0.5,),
                           _F(FISS_MAIT=C_1_0_0,
                              INTEGRATION='GAUSS',
                              ALGO_CONT='CZM',
                              ALGO_LAGR='VERSION2',
                              ORDRE_INT=4,
                              RELATION='CZM_LIN_REG',
                              TOLE_PROJ_EXT=0.5,),
                           ),
                     ALGO_RESO_GEOM='POINT_FIXE',
                     REAC_GEOM='SANS',
                     ITER_CONT_MAXI=3,
                     ITER_CONT_TYPE='MAXI',)

 NOMBRE DE RELATIONS D'EGALITE :                    45
 NOMBRE DE RELATIONS D'EGALITE :                    45
  # Mémoire (Mo) :  1294.34 /  1104.65 /   820.44 /   167.58 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0039   user+syst:        0.10s (syst:        0.02s, elaps:        0.09s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0040            Concept de type : cham_mater
  # ------------------------------------------------------------------------------------------
  CHAMPMA = AFFE_MATERIAU(MAILLAGE=MA,
                          MODELE=MODK,
                          AFFE=_F(MATER=(BETON, ),
                                  GROUP_MA=('VOLUME', ),),
                          INFO=1,
                          )

  # Mémoire (Mo) :  1294.34 /  1105.36 /   820.44 /   167.58 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0040   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0041            Concept de type : char_meca
  # ------------------------------------------------------------------------------------------
  RIGIDE = AFFE_CHAR_MECA(MODELE=MODK,
                          DDL_IMPO=(_F(GROUP_NO=('LIG_HAUT', ),
                                       DZ=0.0,
                                       DX=0.0,
                                       DY=0.0,),
                                    _F(GROUP_MA=('LIG_LAT', ),
                                       DZ=0.0,
                                       DX=0.0,
                                       DY=0.0,),
                                    ),
                          INFO=1,
                          VERI_NORM='OUI',
                          )

  # Mémoire (Mo) :  1294.34 /  1111.11 /   820.44 /   167.58 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0041   user+syst:        0.13s (syst:        0.01s, elaps:        0.13s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0042            Concept de type : char_meca
  # ------------------------------------------------------------------------------------------
  TRACTION = AFFE_CHAR_MECA(MODELE=MODK,
                            FORCE_FACE=(_F(FY=-1.25,
                                           GROUP_MA=('FACE_SUP', ),
                                           FZ=1.25,),
                                        _F(FY=1.25,
                                           GROUP_MA=('FACE_INF', ),
                                           FZ=-1.25,),
                                        ),
                            INFO=1,
                            VERI_NORM='OUI',
                            )

  # Mémoire (Mo) :  1294.34 /  1112.62 /   820.44 /   167.58 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0042   user+syst:        0.03s (syst:        0.00s, elaps:        0.04s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0043            Concept de type : evol_noli
  # ------------------------------------------------------------------------------------------
  EVOL_0 = STAT_NON_LINE(CONTACT=CTX,
                         CHAM_MATER=CHAMPMA,
                         MODELE=MODK,
                         EXCIT=(_F(CHARGE=RIGIDE,
                                   TYPE_CHARGE='FIXE_CSTE',),
                                _F(CHARGE=TRACTION,
                                   FONC_MULT=TRACT_T,
                                   TYPE_CHARGE='FIXE_CSTE',),
                                ),
                         INCREMENT=_F(LIST_INST=INSTANTS,
                                      PRECISION=1.E-09,
                                      INST_FIN=1.E-05,),
                         CONVERGENCE=_F(RESI_GLOB_RELA=1.E-06,
                                        ITER_GLOB_MAXI=10,
                                        ARRET='OUI',
                                        ITER_GLOB_ELAS=25,),
                         COMPORTEMENT=_F(GROUP_MA=('VOLUME', ),
                                         RELATION='ELAS',
                                         ITER_INTE_PAS=0,
                                         RESI_CPLAN_RELA=1.E-06,
                                         PARM_THETA=1.0,
                                         ITER_CPLAN_MAXI=1,
                                         RESI_INTE_RELA=1.E-06,
                                         DEFORMATION='PETIT',
                                         PARM_ALPHA=1.0,
                                         ITER_INTE_MAXI=20,),
                         SOLVEUR=_F(METHODE='MUMPS',
                                    NPREC=-1,
                                    STOP_SINGULIER='OUI',
                                    ELIM_LAGR='LAGR2',
                                    TYPE_RESOL='AUTO',
                                    MATR_DISTRIBUEE='NON',
                                    GESTION_MEMOIRE='AUTO',
                                    FILTRAGE_MATRICE=-1.0,
                                    RENUM='AUTO',
                                    MIXER_PRECISION='NON',
                                    PCENT_PIVOT=20,
                                    PRETRAITEMENTS='AUTO',
                                    POSTTRAITEMENTS='AUTO',
                                    RESI_RELA=-1.0,
                                    SYME='NON',),
                         ARCHIVAGE=_F(CHAM_EXCLU=('VARI_ELGA', ),
                                      LIST_INST=INS_ARCH,
                                      PRECISION=1.E-15,
                                      CRITERE='RELATIF',),
                         NEWTON=_F(REAC_ITER=1,
                                   REAC_INCR=1,
                                   MATRICE='TANGENTE',
                                   REAC_ITER_ELAS=0,),
                         METHODE='NEWTON',)


Liste des comportements

Comportement - Occurrence  1
  Relation                             : ELAS (comportement total)
  Déformation                          : PETIT
  Nombre total de variables internes   : 1
         V1 : VIDE

Le système linéaire à résoudre contient 143091 noeuds dont:
   - 141093 noeuds portant des degrés de liberté physiques
   - 1998 noeuds portant des degrés de liberté de Lagrange
Pour un total de 427329 équations.

La matrice est de taille 427329 équations.
Elle contient 13585725 termes non nuls si elle est symétrique et 26744121 termes non nuls si elle n'est pas symétrique (le nombre de
termes non nuls est susceptible de varier si l'on utilise le contact en formulation continue ou la méthode XFEM avec contact).
Soit un taux de remplissage de   0.015 %.

 Il n'y a pas d'état initial défini. On prend un état initial nul.
  Le champ <DEPL> est initialisé a zéro
  Le champ <SIEF_ELGA> est initialisé a zéro
  Le champ <VARI_ELGA> est initialisé a zéro
  Le champ <INDC_ELEM> est initialisé a zéro
  Le champ <COHE_ELEM> est initialisé a zéro

 Attention, en cas d'erreur (contact, loi de comportement, pilotage, ...), le pas de temps
 ne sera pas redécoupé.

 Archivage de l'état initial

  Archivage des champs
    Champ stocké <DEPL> à l'instant  0.000000000000e+00 pour le numéro d'ordre 0
    Champ stocké <SIEF_ELGA> à l'instant  0.000000000000e+00 pour le numéro d'ordre 0
    Champ stocké <COMPORTEMENT> à l'instant  0.000000000000e+00 pour le numéro d'ordre 0
    Champ stocké <INDC_ELEM> à l'instant  0.000000000000e+00 pour le numéro d'ordre 0
    Champ stocké <COHE_ELEM> à l'instant  0.000000000000e+00 pour le numéro d'ordre 0
    Champ stocké <VALE_CONT> à l'instant  0.000000000000e+00 pour le numéro d'ordre 0
-------------------------------------------------------------------------------------------------------

 Instant de calcul:  1.000000000000e-05 - Niveau de découpe: 1
-------------------------------------------------------------------------------------------------------
|     CONTACT    |     NEWTON     |     RESIDU     |     RESIDU     |     OPTION     |     CONTACT    |
|    BCL. CONT.  |    ITERATION   |     RELATIF    |     ABSOLU     |   ASSEMBLAGE   |     CRITERE    |
|    ITERATION   |                | RESI_GLOB_RELA | RESI_GLOB_MAXI |                |    VALEUR      |
-------------------------------------------------------------------------------------------------------
|     1        X |     0        X | 1.34013E-01  X | 1.03127E+00    |TANGENTE        | - SANS OBJET - |
|     1        X |     1        X | 9.72533E-03  X | 7.48395E-02    |TANGENTE        | - SANS OBJET - |
|     1        X |     2        X | 8.73652E-04  X | 6.72303E-03    |TANGENTE        | - SANS OBJET - |
|     1        X |     3        X | 7.86780E-05  X | 6.05452E-04    |TANGENTE        | - SANS OBJET - |
|     1        X |     4        X | 7.17956E-06  X | 5.52490E-05    |TANGENTE        | - SANS OBJET - |
|     1          |     5          | 6.57585E-07    | 5.06033E-06    |TANGENTE        | - SANS OBJET - |
-------------------------------------------------------------------------------------------------------

  Critère(s) de convergence atteint(s)
    Le résidu de type <RESI_GLOB_RELA> vaut  6.575854651859e-07 au noeud et degré de liberté <N3841   H1Y>

  Temps CPU consommé dans ce pas de temps  : 5 min  7 s
    * Temps moyen par itération de Newton  : 51.298 s ( 6 itérations     )
    * Temps total intégration comportement : 22.700 s ( 7 intégrations   )
    * Temps assemblage matrice             : 5.230 s
    * Temps total factorisation matrice    : 4 min  8 s ( 6 factorisations )
    * Temps construction second membre     : 4.500 s
    * Temps total résolution K.U=F         : 10.880 s ( 6 résolutions    )
    * Temps post-traitement                : 0.170 s
    * Temps autres opérations              : 15.750 s

  Statistiques du contact dans ce pas de temps
    * Nombre de liaisons de contact                     : 0

  Mémoire (Mo) : 11756.54 / 11356.84 /  2392.42 /    12.43 (VmPeak / VmSize / Optimum / Minimum)

  Archivage des champs
    Champ stocké <DEPL> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1
    Champ stocké <SIEF_ELGA> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1
    Champ stocké <VARI_ELGA> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1
    Champ stocké <COMPORTEMENT> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1
    Champ stocké <INDC_ELEM> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1
    Champ stocké <COHE_ELEM> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1
    Champ stocké <VALE_CONT> à l'instant  1.000000000000e-05 pour le numéro d'ordre 1

  Statistiques sur tout le transitoire
    * Nombre de pas de temps                      : 1
    * Nombre d'itérations de Newton               : 6
    * Nombre d'intégrations du comportement       : 7
    * Nombre de factorisations de la matrice      : 6
    * Nombre de résolutions de systèmes linéaires : 6

  Statistiques du contact sur tout le transitoire

  Temps CPU consommé dans le transitoire          : 5 min  7 s
    * Temps total intégration comportement        : 22.700 s
    * Temps assemblage matrice                    : 5.230 s
    * Temps total factorisation matrice           : 4 min  8 s
    * Temps construction second membre            : 4.500 s
    * Temps total résolution K.U=F                : 10.880 s
    * Temps post-traitement (contact, flambement) : 0.170 s
    * Temps autres opérations                     : 15.750 s
#1      Resolution des systemes lineaires                 CPU (USER+SYST/SYST/ELAPS):    266.62    128.69     61.89
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):     37.73      8.35     29.43
  # Mémoire (Mo) : 11756.54 /  1408.29 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0043   user+syst:      316.41s (syst:      140.61s, elaps:       99.97s)
  # ------------------------------------------------------------------------------------------
   
   !----------------------------------------------------------------------------------------!
   ! <A> <SUPERVIS_95>                                                                      !
   !                                                                                        !
   ! Le temps CPU système (140.6) atteint une valeur supérieure à 50% du temps CPU (175.8). !
   ! Ce comportement est peut-être anormal.                                                 !
   !                                                                                        !
   ! -> Conseil :                                                                           !
   !    Augmenter la quantité de mémoire peut permettre de diminuer le temps système.       !
   !                                                                                        !
   !                                                                                        !
   ! Ceci est une alarme. Si vous ne comprenez pas le sens de cette                         !
   ! alarme, vous pouvez obtenir des résultats inattendus !                                 !
   !----------------------------------------------------------------------------------------!
   

  # ------------------------------------------------------------------------------------------
  # Commande No :  0044            Concept de type : cham_no_sdaster
  # ------------------------------------------------------------------------------------------
  CH1 = CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',
                   OPERATION='EXTR',
                   RESULTAT=EVOL_0,
                   NOM_CHAM='DEPL',
                   PRECISION=1.E-09,
                   INST=1.E-05,
                   INTERPOL='NON',
                   CRITERE='RELATIF',
                   INFO=1,)

  # Mémoire (Mo) : 11756.54 /  1428.98 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0044   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0045            Concept de type : cham_elem
  # ------------------------------------------------------------------------------------------
  CH2 = CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                   OPERATION='EXTR',
                   PROL_ZERO='NON',
                   RESULTAT=EVOL_0,
                   NOM_CHAM='SIEF_ELGA',
                   PRECISION=1.E-09,
                   INST=1.E-05,
                   INTERPOL='NON',
                   CRITERE='RELATIF',
                   INFO=1,)

  # Mémoire (Mo) : 11756.54 /  1470.24 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0045   user+syst:        0.03s (syst:        0.00s, elaps:        0.04s)
  # ------------------------------------------------------------------------------------------
Crack Argument - (<Cata.cata.fiss_xfem object at 0x7f18d7e3ef90>, <Cata.cata.fiss_xfem object at 0x7f18eed05350>)

  # ------------------------------------------------------------------------------------------
  # Commande No :  0046            Concept de type : modele_sdaster
  # ------------------------------------------------------------------------------------------
  MODX_0 = MODI_MODELE_XFEM(MODELE_IN=MO,
                            CONTACT='NON',
                            FISSURE=(C_0_1_0, C_1_1_0),
                            INFO=1,
                            CRITERE=1.1E-09,)

 IMPRESSION DES ELEMENTS X-FEM 
                    TYPE      XH      XT     XHT     XHC     XTC    XHTC     XH1     XH2     XH3     XH4    XH2C    XH3C    XH4C
                   HEXA8     220       0       0       0       0       0     0       0       0       0       0       0       0
   
 RECHERCHE DES DDLS HEAVISIDE A ANNULER
 NOMBRE DE NOEUDS OU LES DDLS H SONT MIS A ZERO :                    0
 NOMBRE DE SOUS-ELEMENTS DE PEAU RE-ORIENTES :                    0
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.01      0.05
  # Mémoire (Mo) : 11756.54 /  1527.38 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0046   user+syst:        1.25s (syst:        0.53s, elaps:        0.77s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0047            Concept de type : cham_mater
  # ------------------------------------------------------------------------------------------
  CHAMM_0 = AFFE_MATERIAU(MAILLAGE=MA,
                          MODELE=MODX_0,
                          AFFE=_F(MATER=(BETON, ),
                                  GROUP_MA=('VOLUME', ),),
                          INFO=1,
                          )

  # Mémoire (Mo) : 11756.54 /  1528.09 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0047   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0048            Concept de type : char_meca
  # ------------------------------------------------------------------------------------------
  RIGID_0 = AFFE_CHAR_MECA(MODELE=MODX_0,
                           DDL_IMPO=(_F(GROUP_NO=('LIG_HAUT', ),
                                        DZ=0.0,
                                        DX=0.0,
                                        DY=0.0,),
                                     _F(GROUP_MA=('LIG_LAT', ),
                                        DZ=0.0,
                                        DX=0.0,
                                        DY=0.0,),
                                     ),
                           INFO=1,
                           VERI_NORM='OUI',
                           )

  # Mémoire (Mo) : 11756.54 /  1533.47 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0048   user+syst:        0.14s (syst:        0.02s, elaps:        0.13s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0049            Concept de type : char_meca
  # ------------------------------------------------------------------------------------------
  TRACI_0 = AFFE_CHAR_MECA(MODELE=MODX_0,
                           FORCE_FACE=(_F(FY=-1.25,
                                          GROUP_MA=('FACE_SUP', ),
                                          FZ=1.25,),
                                       _F(FY=1.25,
                                          GROUP_MA=('FACE_INF', ),
                                          FZ=-1.25,),
                                       ),
                           INFO=1,
                           VERI_NORM='OUI',
                           )

  # Mémoire (Mo) : 11756.54 /  1534.99 /  2392.42 /   415.79 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0049   user+syst:        0.04s (syst:        0.01s, elaps:        0.03s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0050            Concept de type : evol_noli
  # ------------------------------------------------------------------------------------------
  EVOL_0 = DYNA_NON_LINE(reuse=EVOL_0,
                         CHAM_MATER=CHAMM_0,
                         MASS_DIAG='OUI',
                         MODELE=MODX_0,
                         EXCIT=(_F(CHARGE=RIGID_0,
                                   TYPE_CHARGE='FIXE_CSTE',
                                   MULT_APPUI='NON',),
                                _F(FONC_MULT=TRACT_X,
                                   CHARGE=TRACI_0,
                                   TYPE_CHARGE='FIXE_CSTE',
                                   MULT_APPUI='NON',),
                                ),
                         NEWTON=_F(MATRICE='TANGENTE',
                                   REAC_ITER=1,
                                   REAC_INCR=1,
                                   REAC_ITER_ELAS=0,),
                         INCREMENT=_F(LIST_INST=INSTANTX,
                                      PRECISION=1.E-09,
                                      INST_INIT=1.E-05,
                                      INST_FIN=1.1E-05,),
                         CONVERGENCE=_F(ITER_GLOB_MAXI=50,
                                        ARRET='OUI',
                                        ITER_GLOB_ELAS=25,),
                         SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENT',
                                         STOP_CFL='NON',
                                         FORMULATION='ACCELERATION',
                                         COEF_MASS_SHIFT=0.0,),
                         COMPORTEMENT=_F(GROUP_MA=('VOLUME', ),
                                         RELATION='ELAS',
                                         ITER_INTE_PAS=0,
                                         RESI_CPLAN_RELA=1.E-06,
                                         PARM_THETA=1.0,
                                         ITER_CPLAN_MAXI=1,
                                         RESI_INTE_RELA=1.E-06,
                                         DEFORMATION='PETIT',
                                         PARM_ALPHA=1.0,
                                         ITER_INTE_MAXI=20,),
                         ARCHIVAGE=_F(INST=(1.1E-05, ),
                                      PRECISION=1.E-15,
                                      CRITERE='RELATIF',),
                         ETAT_INIT=_F(DEPL=CH1,
                                      SIGM=CH2,
                                      PRECISION=1.E-06,
                                      CRITERE='RELATIF',),
                         INFO=1,
                         METHODE='NEWTON',
                         AMOR_RAYL_RIGI='TANGENTE',
                         SOLVEUR=_F(RENUM='METIS',
                                    STOP_SINGULIER='OUI',
                                    ELIM_LAGR='NON',
                                    NPREC=8,
                                    METHODE='MULT_FRONT',
                                    SYME='NON',),
                         )


Liste des comportements

Comportement - Occurrence  1
  Relation                             : ELAS (comportement incrémental)
  Déformation                          : PETIT
  Nombre total de variables internes   : 1
         V1 : VIDE
 k :                   48
 nncone :                   48
 nconf :                    0
 xneuvi nbno :                   96
 xneuvi nnovit :                   48
 xneuvi nncone :                   48
 xneuvi nconf :                    0
 xneuvi nbno 2 :                   96
 NOMBRE DE RELATIONS D'EGALITE :                    48
 lagxfe//ch8 : &&NDLECT.LAGXFE.00000001
 varixf//ch8 : &&NDLECT.LAGXFE.00000001
 nbnoc :                   96
 nconf :                    0
 k :                   48
 nncone :                   48
 nconf :                    0
 xneuvi nbno :                   96
 xneuvi nnovit :                   48
 xneuvi nncone :                   48
 xneuvi nconf :                    0
 xneuvi nbno 2 :                   96
 NOMBRE DE RELATIONS D'EGALITE :                    48
 lagxfe//ch8 : &&NDLECT.LAGXFE.00000002
 varixf//ch8 : &&NDLECT.LAGXFE.00000002
 nbnoc :                   96
 nconf :                    0

Le système linéaire à résoudre contient 142551 noeuds dont:
   - 141093 noeuds portant des degrés de liberté physiques
   - 1458 noeuds portant des degrés de liberté de Lagrange
Pour un total de 426141 équations.

La matrice est de taille 426141 équations.
Elle contient 13480497 termes non nuls si elle est symétrique et 26534853 termes non nuls si elle n'est pas symétrique (le nombre de
termes non nuls est susceptible de varier si l'on utilise le contact en formulation continue ou la méthode XFEM avec contact).
Soit un taux de remplissage de   0.015 %.
 on autorise X-FEM et dynamique

 Lecture de l'état initial
  Le champ <DEPL> est lu dans ETAT_INIT, par un champ donné explicitement
  Le champ <SIEF_ELGA> est lu dans ETAT_INIT, par un champ donné explicitement
  Le champ <VARI_ELGA> est initialisé a zéro
  Le champ <VITE> est initialisé a zéro
  Le champ <ACCE> est initialisé a zéro
  Le champ <COHE_ELEM> est initialisé a zéro

 On suppose qu'on part d'un état a vitesses nulles

 On estime une accélération initiale.

 Pas de temps maximal (condition CFL) pour le schéma des différences centrées : 1.94597e-07 s, sur la maille : M197107

 Attention, en cas d'erreur (contact, loi de comportement, pilotage, ...), le pas de temps
 ne sera pas redécoupé.
  --- routine nmcoxm

 L'état initial n'a pas d'accélération donnée.
 On la calcule.
 
 fin accel0

  Archivage des champs
    Champ stocké <DEPL> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
    Champ stocké <SIEF_ELGA> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
    Champ stocké <VARI_ELGA> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
    Champ stocké <COMPORTEMENT> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
    Champ stocké <VITE> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
    Champ stocké <ACCE> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
    Champ stocké <COHE_ELEM> à l'instant  1.100000000000e-05 pour le numéro d'ordre 2
#1      Resolution des systemes lineaires                 CPU (USER+SYST/SYST/ELAPS):   1128.32    749.67    157.96
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):    207.06     26.59    179.05
#3      Dechargement de la memoire sur disque             CPU (USER+SYST/SYST/ELAPS):      1.88      1.00     18.92


 Critère de destruction du fichier (1.00 %) associé à la base VOLATILE dépassé 1.44 %
 Nombre d'enregistrements utilisés : 1838
 Volume disque occupé              : 1436 Mo.
 Nombre maximum d'enregistrements  : 128000

  # Mémoire (Mo) : 11756.54 /   889.48 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0050   user+syst:     1416.87s (syst:      829.88s, elaps:      378.21s)
  # ------------------------------------------------------------------------------------------
   
   !----------------------------------------------------------------------------------------!
   ! <A> <SUPERVIS_95>                                                                      !
   !                                                                                        !
   ! Le temps CPU système (829.9) atteint une valeur supérieure à 50% du temps CPU (587.0). !
   ! Ce comportement est peut-être anormal.                                                 !
   !                                                                                        !
   ! -> Conseil :                                                                           !
   !    Augmenter la quantité de mémoire peut permettre de diminuer le temps système.       !
   !                                                                                        !
   !                                                                                        !
   ! Ceci est une alarme. Si vous ne comprenez pas le sens de cette                         !
   ! alarme, vous pouvez obtenir des résultats inattendus !                                 !
   !----------------------------------------------------------------------------------------!
   

  # ------------------------------------------------------------------------------------------
  # Commande No :  0051            Concept de type : evol_noli
  # ------------------------------------------------------------------------------------------
  EVOL_0 = EXTR_RESU(reuse=EVOL_0,
                     RESULTAT=EVOL_0,
                     ARCHIVAGE=_F(INST=(1.1E-05, ),
                                  PRECISION=1.E-09,
                                  CRITERE='RELATIF',),
                     )


 STRUCTURE DU CONCEPT EVOL_0   CALCULE POUR 1 NUMERO D'ORDRE

 LISTE DES NOMS SYMBOLIQUES:
 ! ---------- !----------------!----------------!----------------!----------------!----------------!----------------!----------------!
 ! NUME_ORDRE !      DEPL      !      VITE      !      ACCE      !   SIEF_ELGA    !   VARI_ELGA    !  COMPORTEMENT  !   COHE_ELEM    !
 ! ---------- !----------------!----------------!----------------!----------------!----------------!----------------!----------------!
 !          2 !     DEPL_R     !     DEPL_R     !     DEPL_R     !     SIEF_R     !     VARI_R     !     COMPOR     !     NEUT_R     !
 ! ---------- !----------------!----------------!----------------!----------------!----------------!----------------!----------------!

 LISTE DES NOMS DE VARIABLES D'ACCES:
                                      INST             DE TYPE  R

 LISTE DES NOMS DE PARAMETRES:
 ! ---------- !----------------!----------------!----------------!----------------!----------------!----------------!----------------!----------------!
 ! NUME_ORDRE !    CARAELEM    !    CHAMPMAT    !     MODELE     !     EXCIT      !  ETA_PILOTAGE  !   ITER_GLOB    !   CHAR_MINI    ! TRAN_GENE_NOLI !
 ! ---------- !----------------!----------------!----------------!----------------!----------------!----------------!----------------!----------------!
 !          2 !       K8       !       K8       !       K8       !      K24       !       R        !       I        !       R        !      K24       !
 ! ---------- !----------------!----------------!----------------!----------------!----------------!----------------!----------------!----------------!


 NUMERO_ORDRE ITER_GLOB        INST             ETA_PILOTAGE     CHAR_MINI       
              CARAELEM         CHAMPMAT         MODELE          
              EXCIT                    TRAN_GENE_NOLI  


           2            0      1.10000D-05      0.00000D+00      0.00000D+00                            
                              CHAMM_0          MODX_0                                                   
              EVOL_0  .0000.EXCIT                                                                       
  # Mémoire (Mo) : 11756.54 /   889.48 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0051   user+syst:        0.05s (syst:        0.02s, elaps:        0.04s)
  # ------------------------------------------------------------------------------------------
   Quasi-static Crack - C_0_0_0
   Dynamic Crack - C_0_1_0

   ***Testing FISS C_0_1_0 *** 


   *** TEST-1 of 3 - Intiated or arrested? *** 


  # ------------------------------------------------------------------------------------------
  # Commande No :  0052            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  ADVS_0 = CALC_G(OPTION='K_G_COHE',
                  RESULTAT=EVOL_0,
                  LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                             LISSAGE_G='LAGRANGE_NO_NO',),
                  THETA=_F(FISSURE=C_0_1_0,
                           NB_POINT_FOND=2,
                           SYME='NON',
                           NUME_FOND=1,
                           R_INF=5.0,
                           R_SUP=10.0,
                           MODULE=1.0,),
                  INST=(1.1E-05, ),
                  PRECISION=1.E-15,
                  CRITERE='RELATIF',
                  INFO=1,)

 chcohe :EVOL_0  .109.000000     
 gkthi(5) :    0.0000000000000000     
 gkthi(5) :    0.0000000000000000     
 zr(iadrgk-1+(i-1)*8+5) :    0.0000000000000000     
 gith    0.0000000000000000     
 k1th    0.0000000000000000     
 k2th    0.0000000000000000     
 zr(iadrgk-1+(i-1)*8+5) :    0.0000000000000000     
 gith    0.0000000000000000     
 k1th    0.0000000000000000     
 k2th    0.0000000000000000     
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      2.09      0.79      1.25
  # Mémoire (Mo) : 11756.54 /   946.62 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0052   user+syst:        4.25s (syst:        0.99s, elaps:        3.32s)
  # ------------------------------------------------------------------------------------------
0.0

  # ------------------------------------------------------------------------------------------
  # Commande No :  0053            Concept de type : -
  # ------------------------------------------------------------------------------------------
  DETRUIRE(INFO=1,
           CONCEPT=_F(NOM=(ADVS_0, ),),
           )

  # Mémoire (Mo) : 11756.54 /   946.62 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0053   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

   *** TEST-1 RESULT *** 


   FISS C_0_1_0 has not intiated as G = 0.0 therefore len(NFISS) = 1


   Memory location: [<Cata.cata.fiss_xfem object at 0x7f18d7e3ef90>]

   *** TEST- 2 of 3 - Propgated beyond far enough (beyond cohesive zone)? *** 


   In N_FISS not conducting Test 2  


   TEST 2 not conducted... reusing previous SIF

  # ------------------------------------------------------------------------------------------
  # Commande No :  0054            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  SIFF_0 = CALC_G(OPTION='K_G_COHE',
                  RESULTAT=EVOL_0,
                  LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                             LISSAGE_G='LAGRANGE_NO_NO',),
                  THETA=_F(FISSURE=C_0_1_0,
                           NB_POINT_FOND=2,
                           SYME='NON',
                           NUME_FOND=1,
                           R_INF=2.0,
                           R_SUP=10.0,
                           MODULE=1.0,),
                  INST=(1.1E-05, ),
                  PRECISION=1.E-06,
                  CRITERE='RELATIF',
                  INFO=1,)

 chcohe :EVOL_0  .109.000000     
 gkthi(5) :    0.0000000000000000     
 gkthi(5) :    0.0000000000000000     
 zr(iadrgk-1+(i-1)*8+5) :    0.0000000000000000     
 gith    0.0000000000000000     
 k1th    0.0000000000000000     
 k2th    0.0000000000000000     
 zr(iadrgk-1+(i-1)*8+5) :    0.0000000000000000     
 gith    0.0000000000000000     
 k1th    0.0000000000000000     
 k2th    0.0000000000000000     
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      2.05      0.75      1.24
  # Mémoire (Mo) : 11756.54 /   946.62 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0054   user+syst:        4.25s (syst:        1.02s, elaps:        3.30s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0055            Concept de type : -
  # ------------------------------------------------------------------------------------------
  IMPR_TABLE(TABLE=SIFF_0,
             UNITE=6,
             SEPARATEUR=' ',
             COMMENTAIRE='#',
             DEBUT_LIGNE='',
             FIN_LIGNE='\n',
             COMM_PARA='',
             INFO=1,
             IMPR_FONCTION='NON',
             FORMAT_R='E12.5',
             FORMAT='TABLEAU',)

#
#--------------------------------------------------------------------------------
#
#ASTER 12.00.23 CONCEPT SIFF_0 CALCULE LE 12/10/2016 A 18:07:32 DE TYPE          
#TABLE_SDASTER                                                                   
 NUME_FOND    NUME_ORDRE   INST         NUM_PT       ABSC_CURV    K1           K2           K3           G            BETA         G_IRWIN     
            1            2  1.10000E-05            1  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00
            1            2  1.10000E-05            2  2.00000E+01  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00  0.00000E+00

  # Mémoire (Mo) : 11756.54 /   946.62 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0055   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------
<Cata.cata.table_sdaster object at 0x7f18d9463d10>

  # ------------------------------------------------------------------------------------------
  # Commande No :  0056            Concept de type : -
  # ------------------------------------------------------------------------------------------
  IMPR_TABLE(TABLE=SIFF_0,
             UNITE=8,
             SEPARATEUR=' ',
             COMMENTAIRE='#',
             DEBUT_LIGNE='',
             FIN_LIGNE='\n',
             COMM_PARA='',
             INFO=1,
             IMPR_FONCTION='NON',
             FORMAT_R='E12.5',
             FORMAT='TABLEAU',)

  # Mémoire (Mo) : 11756.54 /   946.62 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0056   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------
   min G = [0.0, 0.0]
   SIF[0][0+1] = 
0.0

   *** TEST- 3 of 3 - Propagate cracks *** 


   N_FISS is populated with crack: C_0_1_0
    Propagation_0 ...Crack not initiated using intial cracks in list - L_Int_Crack

  # ------------------------------------------------------------------------------------------
  # Commande No :  0063            Concept de type : modele_sdaster
  # ------------------------------------------------------------------------------------------
  DUMMOD = AFFE_MODELE(MAILLAGE=MA,
                       AFFE=_F(GROUP_MA=('VOLUME', 'FACE_SUP', 'FACE_INF'),
                               PHENOMENE='MECANIQUE',
                               MODELISATION=('3D', ),),
                       INFO=1,
                       VERI_JACOBIEN='OUI',
                       PARTITION=_F(PARALLELISME='GROUP_ELEM',),
                       )


 SUR LES       199106 MAILLES DU MAILLAGE MA      
    ON A DEMANDE L'AFFECTATION DE        92004
    ON A PU EN AFFECTER                  92004

    MODELISATION      ELEMENT FINI      TYPE MAILLE          NOMBRE
                      MECA_FACE4        QUAD4                     4
    3D                MECA_HEXA8        HEXA8                 92000

#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.10      0.01      0.09
  # Mémoire (Mo) : 11756.54 /   961.99 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0063   user+syst:        0.66s (syst:        0.43s, elaps:        0.18s)
  # ------------------------------------------------------------------------------------------

   Creating new quasi-static crack C_0_0_1

  # ------------------------------------------------------------------------------------------
  # Commande No :  0064            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=DUMMOD,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_0_0_1),
                        TABLE=SIFIN_0,
                        FISS_ACTUELLE=FISIN,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  FISIN
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: DUMMOD  
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     2     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     3     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE DUMMOD  

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043227165847226E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                  476
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.12      0.44      0.62
  # Mémoire (Mo) : 11756.54 /  1060.00 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0064   user+syst:        2.79s (syst:        0.50s, elaps:        2.32s)
  # ------------------------------------------------------------------------------------------

   Creating new dynamic crack C_0_1_1

  # ------------------------------------------------------------------------------------------
  # Commande No :  0069            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=DUMMOD,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_0_1_1),
                        TABLE=SIFIN_1,
                        FISS_ACTUELLE=FISIN,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  FISIN
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: DUMMOD  
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     2     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00
     3     2.00000D+01    0.00000D+00    2.00000D+01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE DUMMOD  

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043227086923203E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                  476
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.10      0.46      0.62
  # Mémoire (Mo) : 11756.54 /  1138.61 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0069   user+syst:        2.77s (syst:        0.49s, elaps:        2.30s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0074            Concept de type : -
  # ------------------------------------------------------------------------------------------
  DETRUIRE(INFO=1,
           CONCEPT=_F(NOM=(DUMMOD, ),),
           )

  # Mémoire (Mo) : 11756.54 /  1126.89 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0074   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------
   Quasi-static Crack - C_1_0_0
   Dynamic Crack - C_1_1_0

   ***Testing FISS C_1_1_0 *** 


   *** TEST-1 of 3 - Intiated or arrested? *** 


  # ------------------------------------------------------------------------------------------
  # Commande No :  0075            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  ADVS_1 = CALC_G(OPTION='K_G_COHE',
                  RESULTAT=EVOL_0,
                  LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                             LISSAGE_G='LAGRANGE_NO_NO',),
                  THETA=_F(FISSURE=C_1_1_0,
                           NB_POINT_FOND=2,
                           SYME='NON',
                           NUME_FOND=1,
                           R_INF=5.0,
                           R_SUP=10.0,
                           MODULE=1.0,),
                  INST=(1.1E-05, ),
                  PRECISION=1.E-15,
                  CRITERE='RELATIF',
                  INFO=1,)

 chcohe :EVOL_0  .109.000000     
 gkthi(5) :    1.2656874067406430E-002
 gkthi(5) :    1.2656874067406430E-002
 zr(iadrgk-1+(i-1)*8+5) :    1.2656874067406430E-002
 gith    1.2890870915447065E-006
 k1th   0.11250277359872703     
 k2th   0.11250277359872703     
 zr(iadrgk-1+(i-1)*8+5) :    1.2656874067406430E-002
 gith    1.2890870915447065E-006
 k1th   0.11250277359872703     
 k2th   0.11250277359872703     
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      2.05      0.77      1.24
  # Mémoire (Mo) : 11756.54 /  1169.97 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0075   user+syst:        4.24s (syst:        1.01s, elaps:        3.29s)
  # ------------------------------------------------------------------------------------------
9.66815318659e-08

  # ------------------------------------------------------------------------------------------
  # Commande No :  0076            Concept de type : -
  # ------------------------------------------------------------------------------------------
  DETRUIRE(INFO=1,
           CONCEPT=_F(NOM=(ADVS_1, ),),
           )

  # Mémoire (Mo) : 11756.54 /  1169.97 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0076   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

   *** TEST-1 RESULT *** 
    

   C_1_1_0 has intiated/re-started
   G = 9.66815318659e-08

   Moving on to TEST 2    


   *** TEST- 2 of 3 - Propgated beyond far enough (beyond cohesive zone)? *** 


    TEST 2: (i==0) and (C_1_1_0 not in N_FISS) = PROPAGATE!

  # ------------------------------------------------------------------------------------------
  # Commande No :  0077            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  ADV_1 = PROPA_FISS(INFO=1,
                     METHODE_PROPA='DETECTION',
                     RESULTAT=EVOL_0,
                     TEST_MAIL='NON',
                     ZONE_MAJ='TOUT',
                     MODELE=MODX_0,
                     FISSURE=_F(FISS_PROPAGEE=CO(P_1_1_0),
                                TABLE=SIFIN_1,
                                FISS_ACTUELLE=C_1_1_0,
                                NB_POINT_FOND=(2, ),),
                     )

 nfon :                    3
  -0.10000E+02   0.36293E+03   0.90000E+00
  -0.19984E-13   0.36288E+03   0.90000E+00
   0.10000E+02   0.36293E+03   0.90000E+00
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: MODX_0  
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     1.32223D-01    0.00000D+00    1.32223D-01    0.00000D+00
     2     1.32223D-01    0.00000D+00    1.32223D-01    0.00000D+00
     3     1.32223D-01    0.00000D+00    1.32223D-01    0.00000D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE MODX_0  

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043056020116218E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-4) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                  124

     Nombre de points du fond de fissure : 3

     Nombre de fonds de fissure : 1

     Coordonnées des points des fonds de fissure

     fond de fissure : 1
       X             Y             Z             S
  -0.10000E+02   0.36287E+03   0.90000E+00   0.00000E+00
  -0.19984E-13   0.36287E+03   0.90000E+00   0.10000E+02
   0.10000E+02   0.36287E+03   0.90000E+00   0.20000E+02
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.90      0.46      0.42
  # Mémoire (Mo) : 11756.54 /  1257.77 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0077   user+syst:        3.19s (syst:        0.92s, elaps:        2.24s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0081            Concept de type : -
  # ------------------------------------------------------------------------------------------
  IMPR_TABLE(TITRE=(' CRACK_1\n Time 1.1e-05', ),
             TABLE=ADV_1,
             UNITE=8,
             SEPARATEUR=' ',
             COMMENTAIRE='#',
             DEBUT_LIGNE='',
             FIN_LIGNE='\n',
             COMM_PARA='',
             INFO=1,
             IMPR_FONCTION='NON',
             FORMAT_R='E12.5',
             FORMAT='TABLEAU',)

  # Mémoire (Mo) : 11756.54 /  1257.77 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0081   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
  # ------------------------------------------------------------------------------------------
[0.13222321280735247, 0.13222321870137219, 0.1322229895745748]

  # ------------------------------------------------------------------------------------------
  # Commande No :  0088            Concept de type : -
  # ------------------------------------------------------------------------------------------
  DETRUIRE(INFO=1,
           CONCEPT=_F(NOM=(ADV_1, ),),
           )

  # Mémoire (Mo) : 11756.54 /  1257.77 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0088   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

   Not in N_FISS

   Propagation length (dD_A) = 0.132222989575 of crack P_1_1_0

   Propagation length < 5

   Adding crack P_1_1_0 to PN_FISS 


   Calculating new SIF for crack P_1_1_0

  # ------------------------------------------------------------------------------------------
  # Commande No :  0089            Concept de type : table_sdaster
  # ------------------------------------------------------------------------------------------
  SIFF_1 = CALC_G(OPTION='K_G_COHE',
                  RESULTAT=EVOL_0,
                  LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                             LISSAGE_G='LAGRANGE_NO_NO',),
                  THETA=_F(FISSURE=P_1_1_0,
                           NB_POINT_FOND=2,
                           SYME='NON',
                           NUME_FOND=1,
                           R_INF=2.0,
                           R_SUP=10.0,
                           MODULE=1.0,),
                  INST=(1.1E-05, ),
                  PRECISION=1.E-06,
                  CRITERE='RELATIF',
                  INFO=1,)

 chcohe :EVOL_0  .109.000000     
 gkthi(5) :    1.2656874067406430E-002
 gkthi(5) :    1.2656874067406430E-002
 zr(iadrgk-1+(i-1)*8+5) :    1.2656874067406430E-002
 gith    1.2890870915447065E-006
 k1th   0.11250277359872703     
 k2th   0.11250277359872703     
 zr(iadrgk-1+(i-1)*8+5) :    1.2656874067406430E-002
 gith    1.2890870915447065E-006
 k1th   0.11250277359872703     
 k2th   0.11250277359872703     
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      2.03      0.74      1.24
  # Mémoire (Mo) : 11756.54 /  1257.77 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0089   user+syst:        4.24s (syst:        1.00s, elaps:        3.29s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0090            Concept de type : -
  # ------------------------------------------------------------------------------------------
  IMPR_TABLE(TABLE=SIFF_1,
             UNITE=6,
             SEPARATEUR=' ',
             COMMENTAIRE='#',
             DEBUT_LIGNE='',
             FIN_LIGNE='\n',
             COMM_PARA='',
             INFO=1,
             IMPR_FONCTION='NON',
             FORMAT_R='E12.5',
             FORMAT='TABLEAU',)

#
#--------------------------------------------------------------------------------
#
#ASTER 12.00.23 CONCEPT SIFF_1 CALCULE LE 12/10/2016 A 18:07:46 DE TYPE          
#TABLE_SDASTER                                                                   
 NUME_FOND    NUME_ORDRE   INST         NUM_PT       ABSC_CURV    K1           K2           K3           G            BETA         G_IRWIN     
            1            2  1.10000E-05            1  0.00000E+00  1.68754E-02 -4.15745E-03  2.29253E-04  1.93363E-07  4.37037E-01  2.90045E-08
            1            2  1.10000E-05            2  2.00000E+01  8.43771E-03 -2.07873E-03  1.14627E-04  9.66815E-08  4.37037E-01  7.25111E-09

  # Mémoire (Mo) : 11756.54 /  1257.77 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0090   user+syst:        0.01s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------
  # Commande No :  0091            Concept de type : -
  # ------------------------------------------------------------------------------------------
  IMPR_TABLE(TABLE=SIFF_1,
             UNITE=8,
             SEPARATEUR=' ',
             COMMENTAIRE='#',
             DEBUT_LIGNE='',
             FIN_LIGNE='\n',
             COMM_PARA='',
             INFO=1,
             IMPR_FONCTION='NON',
             FORMAT_R='E12.5',
             FORMAT='TABLEAU',)

  # Mémoire (Mo) : 11756.54 /  1257.77 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0091   user+syst:        0.01s (syst:        0.00s, elaps:        0.00s)
  # ------------------------------------------------------------------------------------------
<Cata.cata.table_sdaster object at 0x7f18edea1c10>
   min G = [1.9336306373170594e-07, 9.668153186585297e-08]
   SIF[1][0+1] = 9.66815318659e-08

   *** TEST- 3 of 3 - Propagate cracks *** 


   PN_FISS is populated with crack: P_1_1_0

  # ------------------------------------------------------------------------------------------
  # Commande No :  0098            Concept de type : modele_sdaster
  # ------------------------------------------------------------------------------------------
  DUMMOD = MODI_MODELE_XFEM(MODELE_IN=MO,
                            CONTACT='NON',
                            FISSURE=(P_1_1_0, ),
                            INFO=1,
                            CRITERE=1.1E-09,)

 IMPRESSION DES ELEMENTS X-FEM 
                    TYPE      XH      XT     XHT     XHC     XTC    XHTC     XH1     XH2     XH3     XH4    XH2C    XH3C    XH4C
                   HEXA8       8       0       0       0       0       0     0       0       0       0       0       0       0
   
 RECHERCHE DES DDLS HEAVISIDE A ANNULER
 NOMBRE DE NOEUDS OU LES DDLS H SONT MIS A ZERO :                    0
 NOMBRE DE SOUS-ELEMENTS DE PEAU RE-ORIENTES :                    0
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.01      0.03
  # Mémoire (Mo) : 11756.54 /  1315.61 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0098   user+syst:        1.12s (syst:        0.50s, elaps:        0.65s)
  # ------------------------------------------------------------------------------------------

   Creating new quasi-static crack C_1_0_1

  # ------------------------------------------------------------------------------------------
  # Commande No :  0099            Concept de type : -
  # ------------------------------------------------------------------------------------------
  PROPA_FISS(INFO=1,
             METHODE_PROPA='COHESIVE',
             DA_MAX=20.0,
             TEST_MAIL='NON',
             ZONE_MAJ='TOUT',
             MODELE=DUMMOD,
             CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
             FISSURE=_F(FISS_PROPAGEE=CO(C_1_0_1),
                        TABLE=SIFF_1,
                        FISS_ACTUELLE=P_1_1_0,
                        NB_POINT_FOND=(2, ),),
             )

-------------------------------------------
NOMBRE DE FISSURES A TRAITER :  1
FISSURE  1   :  P_1_1_0
-------------------------------------------
NbPointFond  2
longueur de la table  2
 LA PROPAGATION EST CALCULEE SUR LE MODELE DE LA STRUCTURE.
 AUCUNE GRILLE AUXILIAIRE N'EST UTILISEE.
    MODELE STRUCTURE: DUMMOD  
    LONGUEUR DE LA PLUS PETITE ARETE DU MAILLAGE:   0.91733828159078112     

 OP0010-1) CALCUL DU CHAMP DE VITESSE AUX NOEUDS
          -------------------------------------
  
 VITESSE DE PROPAGATION EN FOND DE FISSURE
  
  NUM_PT    VITESSE         BETA          VT            VN
     1     2.00000D+01    4.37037D-01    1.81202D+01    8.46513D+00
     2     2.00000D+01    4.37037D-01    1.81202D+01    8.46513D+00
     3     2.00000D+01    4.37037D-01    1.81202D+01    8.46513D+00

 OP0010-2) DOMAINE DE CALCUL
          -------------------------------------
    LE DOMAINE DE CALCUL COINCIDE AVEC LE MODELE PHYSIQUE DUMMOD  

 OP0010-3) MISE A JOUR DES LEVEL SETS
          --------------------------
    AVANCEE MAXIMALE DU FOND DE FISSURE    =    6.9043227176044741E-310
    NOMBRE DE CYCLES DE FATIGUE            =    6.9043246777368022E-310
    
    UTILISATION DE LA METHODE GEOMETRIQUE.

 OP0010-8) ENRICHISSEMENT DE LA SD FISS_XFEM
          ---------------------------------
 NOMBRE DE LEVEL SET REAJUSTEES APRES CONTROLE:                  132
#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      1.10      0.44      0.61
  # Mémoire (Mo) : 11756.54 /  1394.55 /  2497.06 /   642.27 (VmPeak / VmSize / Optimum / Minimum)
  # Fin commande No : 0099   user+syst:        3.27s (syst:        0.91s, elaps:        2.34s)
  # ------------------------------------------------------------------------------------------
<Cata.cata.fiss_xfem object at 0x7f18edea1b50>

   Creating new dynamic crack C_1_1_1
ERREUR A L'INTERPRETATION DANS ACCAS - INTERRUPTION
>> JDC.py : DEBUT RAPPORT
CR phase d'initialisation
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   ! erreur de syntaxe,  Erreur de nom: name 'f' is not defined ligne 1097 !
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
fin CR phase d'initialisation

>> JDC.py : FIN RAPPORT
EXECUTION_CODE_ASTER_EXIT_17397-mbgnktc2-OptiPlex-9010=1

 <I>_EXIT_CODE = 1